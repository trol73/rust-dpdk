#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

/* automatically generated by rust-bindgen */

pub type __int128_t = ::std::os::raw::c_void;
pub type __uint128_t = ::std::os::raw::c_void;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_long;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type uint32_t = ::std::os::raw::c_uint;
pub type uint64_t = ::std::os::raw::c_ulong;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = ::std::os::raw::c_long;
pub type uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type ptrdiff_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed4 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed7;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type _uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed8;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed9;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed10 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_int,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed11 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed13 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed14 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed14;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed15 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed16 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed17 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed17 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed17;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed18 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed18 {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed18;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed19 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed19 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::clone::Clone for Struct_random_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::clone::Clone for Struct_drand48_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed20 {
    _ISupper = 256,
    _ISlower = 512,
    _ISalpha = 1024,
    _ISdigit = 2048,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISprint = 16384,
    _ISgraph = 32768,
    _ISblank = 1,
    _IScntrl = 2,
    _ISpunct = 4,
    _ISalnum = 8,
}
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type unaligned_uint64_t = uint64_t;
pub type unaligned_uint32_t = uint32_t;
pub type unaligned_uint16_t = uint16_t;
pub type __m64 = ::std::os::raw::c_void;
pub type __v2si = ::std::os::raw::c_void;
pub type __v4hi = ::std::os::raw::c_void;
pub type __v8qi = ::std::os::raw::c_void;
pub type __v4si = ::std::os::raw::c_void;
pub type __v4sf = ::std::os::raw::c_void;
pub type __m128 = ::std::os::raw::c_void;
pub type __m128d = ::std::os::raw::c_void;
pub type __m128i = ::std::os::raw::c_void;
pub type __v2df = ::std::os::raw::c_void;
pub type __v2di = ::std::os::raw::c_void;
pub type __v8hi = ::std::os::raw::c_void;
pub type __v16qi = ::std::os::raw::c_void;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed22,
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed22 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed22 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed21;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed23;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed24;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum___codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: size_t)
        -> __ssize_t;
pub type __io_write_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *const ::std::os::raw::c_char, __n: size_t)
        -> __ssize_t;
pub type __io_seek_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __pos: *mut __off64_t, __w: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
pub type __io_close_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_logs {
    pub _type: uint32_t,
    pub level: uint32_t,
    pub file: *mut FILE,
}
impl ::std::clone::Clone for Struct_rte_logs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_logs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memory_info {
    pub name: [::std::os::raw::c_char; 256usize],
    pub size: uint64_t,
}
impl ::std::clone::Clone for Struct_memory_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memory_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memseg_info {
    pub idx: uint32_t,
    pub pfn: uint64_t,
    pub size: uint64_t,
    pub mfn: [uint64_t; 2048usize],
}
impl ::std::clone::Clone for Struct_memseg_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memseg_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memblock_info {
    pub exchange_flag: uint8_t,
    pub used: uint8_t,
    pub vir_addr: uint64_t,
    pub pfn: uint64_t,
    pub mfn: uint64_t,
}
impl ::std::clone::Clone for Struct_memblock_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memblock_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u64)]
pub enum Enum_rte_page_sizes {
    RTE_PGSIZE_4K = 4096,
    RTE_PGSIZE_64K = 65536,
    RTE_PGSIZE_256K = 262144,
    RTE_PGSIZE_2M = 2097152,
    RTE_PGSIZE_16M = 16777216,
    RTE_PGSIZE_256M = 268435456,
    RTE_PGSIZE_512M = 536870912,
    RTE_PGSIZE_1G = 1073741824,
    RTE_PGSIZE_4G = 4294967296,
    RTE_PGSIZE_16G = 17179869184,
}
pub type phys_addr_t = uint64_t;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_rte_memseg {
    pub phys_addr: phys_addr_t,
    pub _bindgen_data_1_: [u64; 1usize],
    pub len: size_t,
    pub hugepage_sz: uint64_t,
    pub socket_id: int32_t,
    pub nchannel: uint32_t,
    pub nrank: uint32_t,
}
impl Struct_rte_memseg {
    pub unsafe fn addr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn addr_64(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_rte_memseg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_memseg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_malloc_socket_stats {
    pub heap_totalsz_bytes: size_t,
    pub heap_freesz_bytes: size_t,
    pub greatest_free_size: size_t,
    pub free_count: ::std::os::raw::c_uint,
    pub alloc_count: ::std::os::raw::c_uint,
    pub heap_allocsz_bytes: size_t,
}
impl ::std::clone::Clone for Struct_rte_malloc_socket_stats {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_malloc_socket_stats {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __v4df = ::std::os::raw::c_void;
pub type __v8sf = ::std::os::raw::c_void;
pub type __v4di = ::std::os::raw::c_void;
pub type __v8si = ::std::os::raw::c_void;
pub type __v16hi = ::std::os::raw::c_void;
pub type __v32qi = ::std::os::raw::c_void;
pub type __m256 = ::std::os::raw::c_void;
pub type __m256d = ::std::os::raw::c_void;
pub type __m256i = ::std::os::raw::c_void;
pub type xmm_t = __m128i;
#[repr(C)]
#[derive(Copy)]
pub struct Union_rte_xmm {
    pub _bindgen_data_: [u8; 16usize],
}
impl Union_rte_xmm {
    pub unsafe fn x(&mut self) -> *mut xmm_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u8(&mut self) -> *mut [uint8_t; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u16(&mut self) -> *mut [uint16_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u32(&mut self) -> *mut [uint32_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u64(&mut self) -> *mut [uint64_t; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pd(&mut self) -> *mut [::std::os::raw::c_double; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_rte_xmm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_rte_xmm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_xmm_t = Union_rte_xmm;
pub type ymm_t = __m256i;
#[repr(C)]
#[derive(Copy)]
pub struct Union_rte_ymm {
    pub _bindgen_data_: [u8; 32usize],
}
impl Union_rte_ymm {
    pub unsafe fn y(&mut self) -> *mut ymm_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn x(&mut self) -> *mut [xmm_t; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u8(&mut self) -> *mut [uint8_t; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u16(&mut self) -> *mut [uint16_t; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u32(&mut self) -> *mut [uint32_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u64(&mut self) -> *mut [uint64_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pd(&mut self) -> *mut [::std::os::raw::c_double; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_rte_ymm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_rte_ymm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_ymm_t = Union_rte_ymm;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub __bits: [__cpu_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cpu_set_t = Struct_Unnamed25;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::clone::Clone for Struct_itimerspec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_sigevent { }
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed26 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1,
}
pub const PTHREAD_MUTEX_NORMAL: Enum_Unnamed27 =
    Enum_Unnamed27::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE: Enum_Unnamed27 =
    Enum_Unnamed27::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK: Enum_Unnamed27 =
    Enum_Unnamed27::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_DEFAULT: Enum_Unnamed27 =
    Enum_Unnamed27::PTHREAD_MUTEX_TIMED_NP;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed27 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
}
pub const PTHREAD_MUTEX_STALLED_NP: Enum_Unnamed28 =
    Enum_Unnamed28::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_ROBUST_NP: Enum_Unnamed28 =
    Enum_Unnamed28::PTHREAD_MUTEX_ROBUST;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed28 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_ROBUST = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed29 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2,
}
pub const PTHREAD_RWLOCK_DEFAULT_NP: Enum_Unnamed30 =
    Enum_Unnamed30::PTHREAD_RWLOCK_PREFER_READER_NP;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed30 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed31 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed32 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed33 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut Struct__pthread_cleanup_buffer,
}
impl ::std::clone::Clone for Struct__pthread_cleanup_buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__pthread_cleanup_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed34 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed35 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed36 {
    pub __cancel_jmp_buf: [Struct_Unnamed37; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
impl ::std::clone::Clone for Struct_Unnamed36 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed36 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed37 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed37 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_unwind_buf_t = Struct_Unnamed36;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_cleanup_frame {
    pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___pthread_cleanup_frame {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_cleanup_frame {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___jmp_buf_tag { }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed38 {
    RTE_MIN_ERRNO = 1000,
    E_RTE_SECONDARY = 1001,
    E_RTE_NO_CONFIG = 1002,
    RTE_MAX_ERRNO = 1003,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_lcore_state_t { WAIT = 0, RUNNING = 1, FINISHED = 2, }
pub type lcore_function_t =
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_rmt_call_master_t { SKIP_MASTER = 0, CALL_MASTER = 1, }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed39 {
    pub cnt: int16_t,
}
impl ::std::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_atomic16_t = Struct_Unnamed39;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed40 {
    pub cnt: int32_t,
}
impl ::std::clone::Clone for Struct_Unnamed40 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed40 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_atomic32_t = Struct_Unnamed40;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed41 {
    pub cnt: int64_t,
}
impl ::std::clone::Clone for Struct_Unnamed41 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed41 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_atomic64_t = Struct_Unnamed41;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_timer_source { EAL_TIMER_TSC = 0, EAL_TIMER_HPET = 1, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_lcore_role_t { ROLE_RTE = 0, ROLE_OFF = 1, }
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_rte_proc_type_t {
    RTE_PROC_AUTO = -1,
    RTE_PROC_PRIMARY = 0,
    RTE_PROC_SECONDARY = 1,
    RTE_PROC_INVALID = 2,
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_rte_config {
    pub master_lcore: uint32_t,
    pub lcore_count: uint32_t,
    pub lcore_role: [Enum_rte_lcore_role_t; 128usize],
    pub process_type: Enum_rte_proc_type_t,
    pub mem_config: *mut Struct_rte_mem_config,
}
impl ::std::clone::Clone for Struct_rte_config {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_usage_hook_t =
    ::std::option::Option<unsafe extern "C" fn(prgname:
                                                   *const ::std::os::raw::c_char)>;
pub type rte_cpuset_t = cpu_set_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lcore_config {
    pub detected: ::std::os::raw::c_uint,
    pub thread_id: pthread_t,
    pub pipe_master2slave: [::std::os::raw::c_int; 2usize],
    pub pipe_slave2master: [::std::os::raw::c_int; 2usize],
    pub f: *mut lcore_function_t,
    pub arg: *mut ::std::os::raw::c_void,
    pub ret: ::std::os::raw::c_int,
    pub state: Enum_rte_lcore_state_t,
    pub socket_id: ::std::os::raw::c_uint,
    pub core_id: ::std::os::raw::c_uint,
    pub core_index: ::std::os::raw::c_int,
    pub cpuset: rte_cpuset_t,
}
impl ::std::clone::Clone for Struct_lcore_config {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_lcore_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed42 {
    pub locked: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed42 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed42 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_spinlock_t = Struct_Unnamed42;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed43 {
    pub sl: rte_spinlock_t,
    pub user: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed43 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed43 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_spinlock_recursive_t = Struct_Unnamed43;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_cpu_flag_t {
    RTE_CPUFLAG_SSE3 = 0,
    RTE_CPUFLAG_PCLMULQDQ = 1,
    RTE_CPUFLAG_DTES64 = 2,
    RTE_CPUFLAG_MONITOR = 3,
    RTE_CPUFLAG_DS_CPL = 4,
    RTE_CPUFLAG_VMX = 5,
    RTE_CPUFLAG_SMX = 6,
    RTE_CPUFLAG_EIST = 7,
    RTE_CPUFLAG_TM2 = 8,
    RTE_CPUFLAG_SSSE3 = 9,
    RTE_CPUFLAG_CNXT_ID = 10,
    RTE_CPUFLAG_FMA = 11,
    RTE_CPUFLAG_CMPXCHG16B = 12,
    RTE_CPUFLAG_XTPR = 13,
    RTE_CPUFLAG_PDCM = 14,
    RTE_CPUFLAG_PCID = 15,
    RTE_CPUFLAG_DCA = 16,
    RTE_CPUFLAG_SSE4_1 = 17,
    RTE_CPUFLAG_SSE4_2 = 18,
    RTE_CPUFLAG_X2APIC = 19,
    RTE_CPUFLAG_MOVBE = 20,
    RTE_CPUFLAG_POPCNT = 21,
    RTE_CPUFLAG_TSC_DEADLINE = 22,
    RTE_CPUFLAG_AES = 23,
    RTE_CPUFLAG_XSAVE = 24,
    RTE_CPUFLAG_OSXSAVE = 25,
    RTE_CPUFLAG_AVX = 26,
    RTE_CPUFLAG_F16C = 27,
    RTE_CPUFLAG_RDRAND = 28,
    RTE_CPUFLAG_FPU = 29,
    RTE_CPUFLAG_VME = 30,
    RTE_CPUFLAG_DE = 31,
    RTE_CPUFLAG_PSE = 32,
    RTE_CPUFLAG_TSC = 33,
    RTE_CPUFLAG_MSR = 34,
    RTE_CPUFLAG_PAE = 35,
    RTE_CPUFLAG_MCE = 36,
    RTE_CPUFLAG_CX8 = 37,
    RTE_CPUFLAG_APIC = 38,
    RTE_CPUFLAG_SEP = 39,
    RTE_CPUFLAG_MTRR = 40,
    RTE_CPUFLAG_PGE = 41,
    RTE_CPUFLAG_MCA = 42,
    RTE_CPUFLAG_CMOV = 43,
    RTE_CPUFLAG_PAT = 44,
    RTE_CPUFLAG_PSE36 = 45,
    RTE_CPUFLAG_PSN = 46,
    RTE_CPUFLAG_CLFSH = 47,
    RTE_CPUFLAG_DS = 48,
    RTE_CPUFLAG_ACPI = 49,
    RTE_CPUFLAG_MMX = 50,
    RTE_CPUFLAG_FXSR = 51,
    RTE_CPUFLAG_SSE = 52,
    RTE_CPUFLAG_SSE2 = 53,
    RTE_CPUFLAG_SS = 54,
    RTE_CPUFLAG_HTT = 55,
    RTE_CPUFLAG_TM = 56,
    RTE_CPUFLAG_PBE = 57,
    RTE_CPUFLAG_DIGTEMP = 58,
    RTE_CPUFLAG_TRBOBST = 59,
    RTE_CPUFLAG_ARAT = 60,
    RTE_CPUFLAG_PLN = 61,
    RTE_CPUFLAG_ECMD = 62,
    RTE_CPUFLAG_PTM = 63,
    RTE_CPUFLAG_MPERF_APERF_MSR = 64,
    RTE_CPUFLAG_ACNT2 = 65,
    RTE_CPUFLAG_ENERGY_EFF = 66,
    RTE_CPUFLAG_FSGSBASE = 67,
    RTE_CPUFLAG_BMI1 = 68,
    RTE_CPUFLAG_HLE = 69,
    RTE_CPUFLAG_AVX2 = 70,
    RTE_CPUFLAG_SMEP = 71,
    RTE_CPUFLAG_BMI2 = 72,
    RTE_CPUFLAG_ERMS = 73,
    RTE_CPUFLAG_INVPCID = 74,
    RTE_CPUFLAG_RTM = 75,
    RTE_CPUFLAG_AVX512F = 76,
    RTE_CPUFLAG_LAHF_SAHF = 77,
    RTE_CPUFLAG_LZCNT = 78,
    RTE_CPUFLAG_SYSCALL = 79,
    RTE_CPUFLAG_XD = 80,
    RTE_CPUFLAG_1GB_PG = 81,
    RTE_CPUFLAG_RDTSCP = 82,
    RTE_CPUFLAG_EM64T = 83,
    RTE_CPUFLAG_INVTSC = 84,
    RTE_CPUFLAG_NUMFLAGS = 85,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_ring_queue_behavior {
    RTE_RING_QUEUE_FIXED = 0,
    RTE_RING_QUEUE_VARIABLE = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_ring {
    pub name: [::std::os::raw::c_char; 32usize],
    pub flags: ::std::os::raw::c_int,
    pub memzone: *const Struct_rte_memzone,
    pub prod: Struct_prod,
    pub cons: Struct_cons,
    pub ring: [*mut ::std::os::raw::c_void; 0usize],
}
impl ::std::clone::Clone for Struct_rte_ring {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_ring {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_prod {
    pub watermark: uint32_t,
    pub sp_enqueue: uint32_t,
    pub size: uint32_t,
    pub mask: uint32_t,
    pub head: uint32_t,
    pub tail: uint32_t,
}
impl ::std::clone::Clone for Struct_prod {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_prod {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cons {
    pub sc_dequeue: uint32_t,
    pub size: uint32_t,
    pub mask: uint32_t,
    pub head: uint32_t,
    pub tail: uint32_t,
}
impl ::std::clone::Clone for Struct_cons {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cons {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed44 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed44 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed44 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type imaxdiv_t = Struct_Unnamed44;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mempool_cache {
    pub len: ::std::os::raw::c_uint,
    pub objs: [*mut ::std::os::raw::c_void; 1536usize],
    pad: [u8; 56],
}
impl ::std::clone::Clone for Struct_rte_mempool_cache {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_mempool_cache {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mempool_objsz {
    pub elt_size: uint32_t,
    pub header_size: uint32_t,
    pub trailer_size: uint32_t,
    pub total_size: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_mempool_objsz {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_mempool_objsz {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mempool_objhdr {
    pub mp: *mut Struct_rte_mempool,
}
impl ::std::clone::Clone for Struct_rte_mempool_objhdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_mempool_objhdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mempool_objtlr {
}
impl ::std::clone::Clone for Struct_rte_mempool_objtlr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_mempool_objtlr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mempool {
    pub name: [::std::os::raw::c_char; 32usize],
    pub ring: *mut Struct_rte_ring,
    pub phys_addr: phys_addr_t,
    pub flags: ::std::os::raw::c_int,
    pub size: uint32_t,
    pub cache_size: uint32_t,
    pub cache_flushthresh: uint32_t,
    pub elt_size: uint32_t,
    pub header_size: uint32_t,
    pub trailer_size: uint32_t,
    pub private_data_size: ::std::os::raw::c_uint,
    pad: [u8; 48],
    pub local_cache: [Struct_rte_mempool_cache; 128usize],
    pub pg_num: uint32_t,
    pub pg_shift: uint32_t,
    pub pg_mask: uintptr_t,
    pub elt_va_start: uintptr_t,
    pub elt_va_end: uintptr_t,
    pub elt_pa: [phys_addr_t; 1usize],
}
impl ::std::clone::Clone for Struct_rte_mempool {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_mempool {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_mempool_obj_iter_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               arg2:
                                                   *mut ::std::os::raw::c_void,
                                               arg3:
                                                   *mut ::std::os::raw::c_void,
                                               arg4: uint32_t)>;
pub type rte_mempool_obj_ctor_t =
    unsafe extern "C" fn(arg1: *mut Struct_rte_mempool,
                         arg2: *mut ::std::os::raw::c_void,
                         arg3: *mut ::std::os::raw::c_void,
                         arg4: ::std::os::raw::c_uint);
pub type rte_mempool_ctor_t =
    unsafe extern "C" fn(arg1: *mut Struct_rte_mempool,
                         arg2: *mut ::std::os::raw::c_void);
pub type MARKER = [*mut ::std::os::raw::c_void; 0usize];
pub type MARKER8 = [uint8_t; 0usize];
pub type MARKER64 = [uint64_t; 0usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_mbuf {
    pub cacheline0: MARKER,
    pub buf_addr: *mut ::std::os::raw::c_void,
    pub buf_physaddr: phys_addr_t,
    pub buf_len: uint16_t,
    pub rearm_data: MARKER8,
    pub data_off: uint16_t,
    pub _bindgen_data_1_: [u16; 1usize],
    pub nb_segs: uint8_t,
    pub port: uint8_t,
    pub ol_flags: uint64_t,
    pub rx_descriptor_fields1: MARKER,
    pub _bindgen_data_2_: [u32; 1usize],
    pub pkt_len: uint32_t,
    pub data_len: uint16_t,
    pub vlan_tci: uint16_t,
    pub hash: Union_Unnamed45,
    pub seqn: uint32_t,
    pub vlan_tci_outer: uint16_t,
    pub cacheline1: MARKER,
    pub _bindgen_data_3_: [u64; 1usize],
    pub pool: *mut Struct_rte_mempool,
    pub next: *mut Struct_rte_mbuf,
    pub _bindgen_data_4_: [u64; 1usize],
    pub priv_size: uint16_t,
    pub timesync: uint16_t,
}
impl Struct_rte_mbuf {
    pub unsafe fn refcnt_atomic(&mut self) -> *mut rte_atomic16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn refcnt(&mut self) -> *mut uint16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn packet_type(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_2_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn userdata(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_3_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn udata64(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_3_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn tx_offload(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_4_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_rte_mbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_mbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed45 {
    pub _bindgen_data_: [u32; 2usize],
}
impl Union_Unnamed45 {
    pub unsafe fn rss(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fdir(&mut self) -> *mut Struct_Unnamed46 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sched(&mut self) -> *mut Struct_Unnamed47 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn usr(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed45 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed45 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed46 {
    pub _bindgen_data_1_: [u32; 1usize],
    pub hi: uint32_t,
}
impl Struct_Unnamed46 {
    pub unsafe fn hash(&mut self) -> *mut uint16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn id(&mut self) -> *mut uint16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(2))
    }
    pub unsafe fn lo(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_Unnamed46 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed46 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed47 {
    pub lo: uint32_t,
    pub hi: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed47 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed47 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pktmbuf_pool_private {
    pub mbuf_data_room_size: uint16_t,
    pub mbuf_priv_size: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_pktmbuf_pool_private {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_pktmbuf_pool_private {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_timer_type { SINGLE = 0, PERIODICAL = 1, }
#[repr(C)]
#[derive(Copy)]
pub struct Union_rte_timer_status {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_rte_timer_status {
    pub unsafe fn state(&mut self) -> *mut uint16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn owner(&mut self) -> *mut int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(2))
    }
    pub unsafe fn u32(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_rte_timer_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_rte_timer_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_timer_cb_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut Struct_rte_timer,
                                               arg2:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_timer {
    pub expire: uint64_t,
    pub sl_next: [*mut Struct_rte_timer; 10usize],
    pub status: Union_rte_timer_status,
    pub period: uint64_t,
    pub f: rte_timer_cb_t,
    pub arg: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_rte_timer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_timer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_tailq_entry {
    pub next: Struct_Unnamed48,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_rte_tailq_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_tailq_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed48 {
    pub tqe_next: *mut Struct_rte_tailq_entry,
    pub tqe_prev: *mut *mut Struct_rte_tailq_entry,
}
impl ::std::clone::Clone for Struct_Unnamed48 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_tailq_entry_head {
    pub tqh_first: *mut Struct_rte_tailq_entry,
    pub tqh_last: *mut *mut Struct_rte_tailq_entry,
}
impl ::std::clone::Clone for Struct_rte_tailq_entry_head {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_tailq_entry_head {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_tailq_head {
    pub tailq_head: Struct_rte_tailq_entry_head,
    pub name: [::std::os::raw::c_char; 32usize],
}
impl ::std::clone::Clone for Struct_rte_tailq_head {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_tailq_head {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_tailq_elem {
    pub head: *mut Struct_rte_tailq_head,
    pub next: Struct_Unnamed49,
    pub name: [::std::os::raw::c_char; 32usize],
}
impl ::std::clone::Clone for Struct_rte_tailq_elem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_tailq_elem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed49 {
    pub tqe_next: *mut Struct_rte_tailq_elem,
    pub tqe_prev: *mut *mut Struct_rte_tailq_elem,
}
impl ::std::clone::Clone for Struct_Unnamed49 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed49 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_rte_memzone {
    pub name: [::std::os::raw::c_char; 32usize],
    pub phys_addr: phys_addr_t,
    pub _bindgen_data_1_: [u64; 1usize],
    pub len: size_t,
    pub hugepage_sz: uint64_t,
    pub socket_id: int32_t,
    pub flags: uint32_t,
    pub memseg_id: uint32_t,
}
impl Struct_rte_memzone {
    pub unsafe fn addr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn addr_64(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_rte_memzone {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_memzone {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_malloc_elem { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_malloc_heap {
    pub lock: rte_spinlock_t,
    pub free_head: [Struct_Unnamed50; 13usize],
    pub alloc_count: ::std::os::raw::c_uint,
    pub total_size: size_t,
}
impl ::std::clone::Clone for Struct_malloc_heap {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_malloc_heap {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed50 {
    pub lh_first: *mut Struct_malloc_elem,
}
impl ::std::clone::Clone for Struct_Unnamed50 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed50 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed51 {
    pub cnt: int32_t,
}
impl ::std::clone::Clone for Struct_Unnamed51 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed51 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_rwlock_t = Struct_Unnamed51;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_rte_mem_config {
    pub magic: uint32_t,
    pub nchannel: uint32_t,
    pub nrank: uint32_t,
    pub mlock: rte_rwlock_t,
    pub qlock: rte_rwlock_t,
    pub mplock: rte_rwlock_t,
    pub memzone_cnt: uint32_t,
    pub memseg: [Struct_rte_memseg; 256usize],
    pub memzone: [Struct_rte_memzone; 2560usize],
    pub tailq_head: [Struct_rte_tailq_head; 32usize],
    pub malloc_heaps: [Struct_malloc_heap; 8usize],
    pub mem_cfg_addr: uint64_t,
}
impl ::std::clone::Clone for Struct_rte_mem_config {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_mem_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_intr_callback_fn =
    ::std::option::Option<unsafe extern "C" fn(intr_handle:
                                                   *mut Struct_rte_intr_handle,
                                               cb_arg:
                                                   *mut ::std::os::raw::c_void)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_intr_handle_type {
    RTE_INTR_HANDLE_UNKNOWN = 0,
    RTE_INTR_HANDLE_UIO = 1,
    RTE_INTR_HANDLE_UIO_INTX = 2,
    RTE_INTR_HANDLE_VFIO_LEGACY = 3,
    RTE_INTR_HANDLE_VFIO_MSI = 4,
    RTE_INTR_HANDLE_VFIO_MSIX = 5,
    RTE_INTR_HANDLE_ALARM = 6,
    RTE_INTR_HANDLE_EXT = 7,
    RTE_INTR_HANDLE_MAX = 8,
}
pub type rte_intr_event_cb_t =
    ::std::option::Option<unsafe extern "C" fn(fd: ::std::os::raw::c_int,
                                               arg:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_epoll_data {
    pub event: uint32_t,
    pub data: *mut ::std::os::raw::c_void,
    pub cb_fun: rte_intr_event_cb_t,
    pub cb_arg: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_rte_epoll_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_epoll_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed52 {
    RTE_EPOLL_INVALID = 0,
    RTE_EPOLL_VALID = 1,
    RTE_EPOLL_EXEC = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_epoll_event {
    pub status: uint32_t,
    pub fd: ::std::os::raw::c_int,
    pub epfd: ::std::os::raw::c_int,
    pub epdata: Struct_rte_epoll_data,
}
impl ::std::clone::Clone for Struct_rte_epoll_event {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_epoll_event {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_intr_handle {
    pub _bindgen_data_1_: [u32; 1usize],
    pub fd: ::std::os::raw::c_int,
    pub _type: Enum_rte_intr_handle_type,
    pub max_intr: uint32_t,
    pub nb_efd: uint32_t,
    pub efds: [::std::os::raw::c_int; 32usize],
    pub elist: [Struct_rte_epoll_event; 32usize],
    pub intr_vec: *mut ::std::os::raw::c_int,
}
impl Struct_rte_intr_handle {
    pub unsafe fn vfio_dev_fd(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uio_cfg_fd(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_rte_intr_handle {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_intr_handle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pci_device_list {
    pub tqh_first: *mut Struct_rte_pci_device,
    pub tqh_last: *mut *mut Struct_rte_pci_device,
}
impl ::std::clone::Clone for Struct_pci_device_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_pci_device_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pci_driver_list {
    pub tqh_first: *mut Struct_rte_pci_driver,
    pub tqh_last: *mut *mut Struct_rte_pci_driver,
}
impl ::std::clone::Clone for Struct_pci_driver_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_pci_driver_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_resource {
    pub phys_addr: uint64_t,
    pub len: uint64_t,
    pub addr: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_rte_pci_resource {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_pci_resource {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_id {
    pub vendor_id: uint16_t,
    pub device_id: uint16_t,
    pub subsystem_vendor_id: uint16_t,
    pub subsystem_device_id: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_pci_id {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_pci_id {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_addr {
    pub domain: uint16_t,
    pub bus: uint8_t,
    pub devid: uint8_t,
    pub function: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_pci_addr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_pci_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_kernel_driver {
    RTE_KDRV_UNKNOWN = 0,
    RTE_KDRV_IGB_UIO = 1,
    RTE_KDRV_VFIO = 2,
    RTE_KDRV_UIO_GENERIC = 3,
    RTE_KDRV_NIC_UIO = 4,
    RTE_KDRV_NONE = 5,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_device {
    pub next: Struct_Unnamed53,
    pub addr: Struct_rte_pci_addr,
    pub id: Struct_rte_pci_id,
    pub mem_resource: [Struct_rte_pci_resource; 6usize],
    pub intr_handle: Struct_rte_intr_handle,
    pub driver: *mut Struct_rte_pci_driver,
    pub max_vfs: uint16_t,
    pub numa_node: ::std::os::raw::c_int,
    pub devargs: *mut Struct_rte_devargs,
    pub kdrv: Enum_rte_kernel_driver,
}
impl ::std::clone::Clone for Struct_rte_pci_device {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_pci_device {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed53 {
    pub tqe_next: *mut Struct_rte_pci_device,
    pub tqe_prev: *mut *mut Struct_rte_pci_device,
}
impl ::std::clone::Clone for Struct_Unnamed53 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed53 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pci_devinit_t =
    unsafe extern "C" fn(arg1: *mut Struct_rte_pci_driver,
                         arg2: *mut Struct_rte_pci_device)
        -> ::std::os::raw::c_int;
pub type pci_devuninit_t =
    unsafe extern "C" fn(arg1: *mut Struct_rte_pci_device)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_driver {
    pub next: Struct_Unnamed54,
    pub name: *const ::std::os::raw::c_char,
    pub devinit: *mut pci_devinit_t,
    pub devuninit: *mut pci_devuninit_t,
    pub id_table: *const Struct_rte_pci_id,
    pub drv_flags: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_pci_driver {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_pci_driver {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed54 {
    pub tqe_next: *mut Struct_rte_pci_driver,
    pub tqe_prev: *mut *mut Struct_rte_pci_driver,
}
impl ::std::clone::Clone for Struct_Unnamed54 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed54 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pci_map {
    pub addr: *mut ::std::os::raw::c_void,
    pub path: *mut ::std::os::raw::c_char,
    pub offset: uint64_t,
    pub size: uint64_t,
    pub phaddr: uint64_t,
}
impl ::std::clone::Clone for Struct_pci_map {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_pci_map {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mapped_pci_resource {
    pub next: Struct_Unnamed55,
    pub pci_addr: Struct_rte_pci_addr,
    pub path: [::std::os::raw::c_char; 4096usize],
    pub nb_maps: ::std::os::raw::c_int,
    pub maps: [Struct_pci_map; 6usize],
}
impl ::std::clone::Clone for Struct_mapped_pci_resource {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mapped_pci_resource {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed55 {
    pub tqe_next: *mut Struct_mapped_pci_resource,
    pub tqe_prev: *mut *mut Struct_mapped_pci_resource,
}
impl ::std::clone::Clone for Struct_Unnamed55 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed55 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mapped_pci_res_list {
    pub tqh_first: *mut Struct_mapped_pci_resource,
    pub tqh_last: *mut *mut Struct_mapped_pci_resource,
}
impl ::std::clone::Clone for Struct_mapped_pci_res_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mapped_pci_res_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_pci_ioport {
    pub dev: *mut Struct_rte_pci_device,
    pub base: uint64_t,
}
impl ::std::clone::Clone for Struct_rte_pci_ioport {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_pci_ioport {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_driver_list {
    pub tqh_first: *mut Struct_rte_driver,
    pub tqh_last: *mut *mut Struct_rte_driver,
}
impl ::std::clone::Clone for Struct_rte_driver_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_driver_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_dev_init_t =
    unsafe extern "C" fn(name: *const ::std::os::raw::c_char,
                         args: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
pub type rte_dev_uninit_t =
    unsafe extern "C" fn(name: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_pmd_type { PMD_VDEV = 0, PMD_PDEV = 1, }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_driver {
    pub next: Struct_Unnamed56,
    pub _type: Enum_pmd_type,
    pub name: *const ::std::os::raw::c_char,
    pub init: *mut rte_dev_init_t,
    pub uninit: *mut rte_dev_uninit_t,
}
impl ::std::clone::Clone for Struct_rte_driver {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_driver {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed56 {
    pub tqe_next: *mut Struct_rte_driver,
    pub tqe_prev: *mut *mut Struct_rte_driver,
}
impl ::std::clone::Clone for Struct_Unnamed56 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed56 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_devtype {
    RTE_DEVTYPE_WHITELISTED_PCI = 0,
    RTE_DEVTYPE_BLACKLISTED_PCI = 1,
    RTE_DEVTYPE_VIRTUAL = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_devargs {
    pub next: Struct_Unnamed57,
    pub _type: Enum_rte_devtype,
    pub _bindgen_data_1_: [u16; 16usize],
    pub args: *mut ::std::os::raw::c_char,
}
impl Struct_rte_devargs {
    pub unsafe fn pci(&mut self) -> *mut Struct_Unnamed58 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn virt(&mut self) -> *mut Struct_Unnamed59 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_rte_devargs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_devargs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed57 {
    pub tqe_next: *mut Struct_rte_devargs,
    pub tqe_prev: *mut *mut Struct_rte_devargs,
}
impl ::std::clone::Clone for Struct_Unnamed57 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed57 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed58 {
    pub addr: Struct_rte_pci_addr,
}
impl ::std::clone::Clone for Struct_Unnamed58 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed58 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed59 {
    pub drv_name: [::std::os::raw::c_char; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed59 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed59 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_devargs_list {
    pub tqh_first: *mut Struct_rte_devargs,
    pub tqh_last: *mut *mut Struct_rte_devargs,
}
impl ::std::clone::Clone for Struct_rte_devargs_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_devargs_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_ether_addr {
    pub addr_bytes: [uint8_t; 6usize],
}
impl ::std::clone::Clone for Struct_ether_addr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ether_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_ether_hdr {
    pub d_addr: Struct_ether_addr,
    pub s_addr: Struct_ether_addr,
    pub ether_type: uint16_t,
}
impl ::std::clone::Clone for Struct_ether_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ether_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_vlan_hdr {
    pub vlan_tci: uint16_t,
    pub eth_proto: uint16_t,
}
impl ::std::clone::Clone for Struct_vlan_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vlan_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_vxlan_hdr {
    pub vx_flags: uint32_t,
    pub vx_vni: uint32_t,
}
impl ::std::clone::Clone for Struct_vxlan_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vxlan_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_filter_type {
    RTE_ETH_FILTER_NONE = 0,
    RTE_ETH_FILTER_MACVLAN = 1,
    RTE_ETH_FILTER_ETHERTYPE = 2,
    RTE_ETH_FILTER_FLEXIBLE = 3,
    RTE_ETH_FILTER_SYN = 4,
    RTE_ETH_FILTER_NTUPLE = 5,
    RTE_ETH_FILTER_TUNNEL = 6,
    RTE_ETH_FILTER_FDIR = 7,
    RTE_ETH_FILTER_HASH = 8,
    RTE_ETH_FILTER_L2_TUNNEL = 9,
    RTE_ETH_FILTER_MAX = 10,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_filter_op {
    RTE_ETH_FILTER_NOP = 0,
    RTE_ETH_FILTER_ADD = 1,
    RTE_ETH_FILTER_UPDATE = 2,
    RTE_ETH_FILTER_DELETE = 3,
    RTE_ETH_FILTER_FLUSH = 4,
    RTE_ETH_FILTER_GET = 5,
    RTE_ETH_FILTER_SET = 6,
    RTE_ETH_FILTER_INFO = 7,
    RTE_ETH_FILTER_STATS = 8,
    RTE_ETH_FILTER_OP_MAX = 9,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_mac_filter_type {
    RTE_MAC_PERFECT_MATCH = 1,
    RTE_MACVLAN_PERFECT_MATCH = 2,
    RTE_MAC_HASH_MATCH = 3,
    RTE_MACVLAN_HASH_MATCH = 4,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_mac_filter {
    pub is_vf: uint8_t,
    pub dst_id: uint16_t,
    pub filter_type: Enum_rte_mac_filter_type,
    pub mac_addr: Struct_ether_addr,
}
impl ::std::clone::Clone for Struct_rte_eth_mac_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_mac_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_ethertype_filter {
    pub mac_addr: Struct_ether_addr,
    pub ether_type: uint16_t,
    pub flags: uint16_t,
    pub queue: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_ethertype_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_ethertype_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_flex_filter {
    pub len: uint16_t,
    pub bytes: [uint8_t; 128usize],
    pub mask: [uint8_t; 16usize],
    pub priority: uint8_t,
    pub queue: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_flex_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_flex_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_syn_filter {
    pub hig_pri: uint8_t,
    pub queue: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_syn_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_syn_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_ntuple_filter {
    pub flags: uint16_t,
    pub dst_ip: uint32_t,
    pub dst_ip_mask: uint32_t,
    pub src_ip: uint32_t,
    pub src_ip_mask: uint32_t,
    pub dst_port: uint16_t,
    pub dst_port_mask: uint16_t,
    pub src_port: uint16_t,
    pub src_port_mask: uint16_t,
    pub proto: uint8_t,
    pub proto_mask: uint8_t,
    pub tcp_flags: uint8_t,
    pub priority: uint16_t,
    pub queue: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_ntuple_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_ntuple_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_tunnel_type {
    RTE_TUNNEL_TYPE_NONE = 0,
    RTE_TUNNEL_TYPE_VXLAN = 1,
    RTE_TUNNEL_TYPE_GENEVE = 2,
    RTE_TUNNEL_TYPE_TEREDO = 3,
    RTE_TUNNEL_TYPE_NVGRE = 4,
    RTE_TUNNEL_TYPE_IP_IN_GRE = 5,
    RTE_L2_TUNNEL_TYPE_E_TAG = 6,
    RTE_TUNNEL_TYPE_MAX = 7,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_tunnel_iptype {
    RTE_TUNNEL_IPTYPE_IPV4 = 0,
    RTE_TUNNEL_IPTYPE_IPV6 = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_tunnel_filter_conf {
    pub outer_mac: Struct_ether_addr,
    pub inner_mac: Struct_ether_addr,
    pub inner_vlan: uint16_t,
    pub ip_type: Enum_rte_tunnel_iptype,
    pub ip_addr: Union_Unnamed60,
    pub filter_type: uint16_t,
    pub tunnel_type: Enum_rte_eth_tunnel_type,
    pub tenant_id: uint32_t,
    pub queue_id: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_tunnel_filter_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_tunnel_filter_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed60 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed60 {
    pub unsafe fn ipv4_addr(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ipv6_addr(&mut self) -> *mut [uint32_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed60 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed60 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_global_cfg_type {
    RTE_ETH_GLOBAL_CFG_TYPE_UNKNOWN = 0,
    RTE_ETH_GLOBAL_CFG_TYPE_GRE_KEY_LEN = 1,
    RTE_ETH_GLOBAL_CFG_TYPE_MAX = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_global_cfg {
    pub cfg_type: Enum_rte_eth_global_cfg_type,
    pub cfg: Union_Unnamed61,
}
impl ::std::clone::Clone for Struct_rte_eth_global_cfg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_global_cfg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed61 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed61 {
    pub unsafe fn gre_key_len(&mut self) -> *mut uint8_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn reserved(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed61 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed61 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_input_set_field {
    RTE_ETH_INPUT_SET_UNKNOWN = 0,
    RTE_ETH_INPUT_SET_L2_SRC_MAC = 1,
    RTE_ETH_INPUT_SET_L2_DST_MAC = 2,
    RTE_ETH_INPUT_SET_L2_OUTER_VLAN = 3,
    RTE_ETH_INPUT_SET_L2_INNER_VLAN = 4,
    RTE_ETH_INPUT_SET_L2_ETHERTYPE = 5,
    RTE_ETH_INPUT_SET_L3_SRC_IP4 = 129,
    RTE_ETH_INPUT_SET_L3_DST_IP4 = 130,
    RTE_ETH_INPUT_SET_L3_SRC_IP6 = 131,
    RTE_ETH_INPUT_SET_L3_DST_IP6 = 132,
    RTE_ETH_INPUT_SET_L3_IP4_TOS = 133,
    RTE_ETH_INPUT_SET_L3_IP4_PROTO = 134,
    RTE_ETH_INPUT_SET_L3_IP6_TC = 135,
    RTE_ETH_INPUT_SET_L3_IP6_NEXT_HEADER = 136,
    RTE_ETH_INPUT_SET_L3_IP4_TTL = 137,
    RTE_ETH_INPUT_SET_L3_IP6_HOP_LIMITS = 138,
    RTE_ETH_INPUT_SET_L4_UDP_SRC_PORT = 257,
    RTE_ETH_INPUT_SET_L4_UDP_DST_PORT = 258,
    RTE_ETH_INPUT_SET_L4_TCP_SRC_PORT = 259,
    RTE_ETH_INPUT_SET_L4_TCP_DST_PORT = 260,
    RTE_ETH_INPUT_SET_L4_SCTP_SRC_PORT = 261,
    RTE_ETH_INPUT_SET_L4_SCTP_DST_PORT = 262,
    RTE_ETH_INPUT_SET_L4_SCTP_VERIFICATION_TAG = 263,
    RTE_ETH_INPUT_SET_TUNNEL_L2_INNER_DST_MAC = 385,
    RTE_ETH_INPUT_SET_TUNNEL_L2_INNER_SRC_MAC = 386,
    RTE_ETH_INPUT_SET_TUNNEL_L2_INNER_VLAN = 387,
    RTE_ETH_INPUT_SET_TUNNEL_L4_UDP_KEY = 388,
    RTE_ETH_INPUT_SET_TUNNEL_GRE_KEY = 389,
    RTE_ETH_INPUT_SET_FLEX_PAYLOAD_1ST_WORD = 641,
    RTE_ETH_INPUT_SET_FLEX_PAYLOAD_2ND_WORD = 642,
    RTE_ETH_INPUT_SET_FLEX_PAYLOAD_3RD_WORD = 643,
    RTE_ETH_INPUT_SET_FLEX_PAYLOAD_4TH_WORD = 644,
    RTE_ETH_INPUT_SET_FLEX_PAYLOAD_5TH_WORD = 645,
    RTE_ETH_INPUT_SET_FLEX_PAYLOAD_6TH_WORD = 646,
    RTE_ETH_INPUT_SET_FLEX_PAYLOAD_7TH_WORD = 647,
    RTE_ETH_INPUT_SET_FLEX_PAYLOAD_8TH_WORD = 648,
    RTE_ETH_INPUT_SET_DEFAULT = 65533,
    RTE_ETH_INPUT_SET_NONE = 65534,
    RTE_ETH_INPUT_SET_MAX = 65535,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_filter_input_set_op {
    RTE_ETH_INPUT_SET_OP_UNKNOWN = 0,
    RTE_ETH_INPUT_SET_SELECT = 1,
    RTE_ETH_INPUT_SET_ADD = 2,
    RTE_ETH_INPUT_SET_OP_MAX = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_input_set_conf {
    pub flow_type: uint16_t,
    pub inset_size: uint16_t,
    pub field: [Enum_rte_eth_input_set_field; 128usize],
    pub op: Enum_rte_filter_input_set_op,
}
impl ::std::clone::Clone for Struct_rte_eth_input_set_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_input_set_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_l2_flow {
    pub ether_type: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_l2_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_l2_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_ipv4_flow {
    pub src_ip: uint32_t,
    pub dst_ip: uint32_t,
    pub tos: uint8_t,
    pub ttl: uint8_t,
    pub proto: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_ipv4_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_ipv4_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_udpv4_flow {
    pub ip: Struct_rte_eth_ipv4_flow,
    pub src_port: uint16_t,
    pub dst_port: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_udpv4_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_udpv4_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_tcpv4_flow {
    pub ip: Struct_rte_eth_ipv4_flow,
    pub src_port: uint16_t,
    pub dst_port: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_tcpv4_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_tcpv4_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_sctpv4_flow {
    pub ip: Struct_rte_eth_ipv4_flow,
    pub src_port: uint16_t,
    pub dst_port: uint16_t,
    pub verify_tag: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_eth_sctpv4_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_sctpv4_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_ipv6_flow {
    pub src_ip: [uint32_t; 4usize],
    pub dst_ip: [uint32_t; 4usize],
    pub tc: uint8_t,
    pub proto: uint8_t,
    pub hop_limits: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_ipv6_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_ipv6_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_udpv6_flow {
    pub ip: Struct_rte_eth_ipv6_flow,
    pub src_port: uint16_t,
    pub dst_port: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_udpv6_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_udpv6_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_tcpv6_flow {
    pub ip: Struct_rte_eth_ipv6_flow,
    pub src_port: uint16_t,
    pub dst_port: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_tcpv6_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_tcpv6_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_sctpv6_flow {
    pub ip: Struct_rte_eth_ipv6_flow,
    pub src_port: uint16_t,
    pub dst_port: uint16_t,
    pub verify_tag: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_eth_sctpv6_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_sctpv6_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_mac_vlan_flow {
    pub mac_addr: Struct_ether_addr,
}
impl ::std::clone::Clone for Struct_rte_eth_mac_vlan_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_mac_vlan_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_fdir_tunnel_type {
    RTE_FDIR_TUNNEL_TYPE_UNKNOWN = 0,
    RTE_FDIR_TUNNEL_TYPE_NVGRE = 1,
    RTE_FDIR_TUNNEL_TYPE_VXLAN = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_tunnel_flow {
    pub tunnel_type: Enum_rte_eth_fdir_tunnel_type,
    pub tunnel_id: uint32_t,
    pub mac_addr: Struct_ether_addr,
}
impl ::std::clone::Clone for Struct_rte_eth_tunnel_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_tunnel_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_rte_eth_fdir_flow {
    pub _bindgen_data_: [u32; 11usize],
}
impl Union_rte_eth_fdir_flow {
    pub unsafe fn l2_flow(&mut self) -> *mut Struct_rte_eth_l2_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn udp4_flow(&mut self) -> *mut Struct_rte_eth_udpv4_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn tcp4_flow(&mut self) -> *mut Struct_rte_eth_tcpv4_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sctp4_flow(&mut self) -> *mut Struct_rte_eth_sctpv4_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ip4_flow(&mut self) -> *mut Struct_rte_eth_ipv4_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn udp6_flow(&mut self) -> *mut Struct_rte_eth_udpv6_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn tcp6_flow(&mut self) -> *mut Struct_rte_eth_tcpv6_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sctp6_flow(&mut self) -> *mut Struct_rte_eth_sctpv6_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ipv6_flow(&mut self) -> *mut Struct_rte_eth_ipv6_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mac_vlan_flow(&mut self)
     -> *mut Struct_rte_eth_mac_vlan_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn tunnel_flow(&mut self) -> *mut Struct_rte_eth_tunnel_flow {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_rte_eth_fdir_flow {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_rte_eth_fdir_flow {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_flow_ext {
    pub vlan_tci: uint16_t,
    pub flexbytes: [uint8_t; 16usize],
    pub is_vf: uint8_t,
    pub dst_id: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_flow_ext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_flow_ext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_input {
    pub flow_type: uint16_t,
    pub flow: Union_rte_eth_fdir_flow,
    pub flow_ext: Struct_rte_eth_fdir_flow_ext,
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_input {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_input {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_fdir_behavior {
    RTE_ETH_FDIR_ACCEPT = 0,
    RTE_ETH_FDIR_REJECT = 1,
    RTE_ETH_FDIR_PASSTHRU = 2,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_fdir_status {
    RTE_ETH_FDIR_NO_REPORT_STATUS = 0,
    RTE_ETH_FDIR_REPORT_ID = 1,
    RTE_ETH_FDIR_REPORT_ID_FLEX_4 = 2,
    RTE_ETH_FDIR_REPORT_FLEX_8 = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_action {
    pub rx_queue: uint16_t,
    pub behavior: Enum_rte_eth_fdir_behavior,
    pub report_status: Enum_rte_eth_fdir_status,
    pub flex_off: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_action {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_action {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_filter {
    pub soft_id: uint32_t,
    pub input: Struct_rte_eth_fdir_input,
    pub action: Struct_rte_eth_fdir_action,
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_masks {
    pub vlan_tci_mask: uint16_t,
    pub ipv4_mask: Struct_rte_eth_ipv4_flow,
    pub ipv6_mask: Struct_rte_eth_ipv6_flow,
    pub src_port_mask: uint16_t,
    pub dst_port_mask: uint16_t,
    pub mac_addr_byte_mask: uint8_t,
    pub tunnel_id_mask: uint32_t,
    pub tunnel_type_mask: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_masks {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_masks {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_payload_type {
    RTE_ETH_PAYLOAD_UNKNOWN = 0,
    RTE_ETH_RAW_PAYLOAD = 1,
    RTE_ETH_L2_PAYLOAD = 2,
    RTE_ETH_L3_PAYLOAD = 3,
    RTE_ETH_L4_PAYLOAD = 4,
    RTE_ETH_PAYLOAD_MAX = 8,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_flex_payload_cfg {
    pub _type: Enum_rte_eth_payload_type,
    pub src_offset: [uint16_t; 16usize],
}
impl ::std::clone::Clone for Struct_rte_eth_flex_payload_cfg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_flex_payload_cfg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_flex_mask {
    pub flow_type: uint16_t,
    pub mask: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_flex_mask {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_flex_mask {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_flex_conf {
    pub nb_payloads: uint16_t,
    pub nb_flexmasks: uint16_t,
    pub flex_set: [Struct_rte_eth_flex_payload_cfg; 8usize],
    pub flex_mask: [Struct_rte_eth_fdir_flex_mask; 18usize],
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_flex_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_flex_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_fdir_mode {
    RTE_FDIR_MODE_NONE = 0,
    RTE_FDIR_MODE_SIGNATURE = 1,
    RTE_FDIR_MODE_PERFECT = 2,
    RTE_FDIR_MODE_PERFECT_MAC_VLAN = 3,
    RTE_FDIR_MODE_PERFECT_TUNNEL = 4,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_info {
    pub mode: Enum_rte_fdir_mode,
    pub mask: Struct_rte_eth_fdir_masks,
    pub flex_conf: Struct_rte_eth_fdir_flex_conf,
    pub guarant_spc: uint32_t,
    pub best_spc: uint32_t,
    pub flow_types_mask: [uint32_t; 1usize],
    pub max_flexpayload: uint32_t,
    pub flex_payload_unit: uint32_t,
    pub max_flex_payload_segment_num: uint32_t,
    pub flex_payload_limit: uint16_t,
    pub flex_bitmask_unit: uint32_t,
    pub max_flex_bitmask_num: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_stats {
    pub collision: uint32_t,
    pub free: uint32_t,
    pub maxhash: uint32_t,
    pub maxlen: uint32_t,
    pub add: uint64_t,
    pub remove: uint64_t,
    pub f_add: uint64_t,
    pub f_remove: uint64_t,
    pub guarant_cnt: uint32_t,
    pub best_cnt: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_stats {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_stats {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_fdir_filter_info_type {
    RTE_ETH_FDIR_FILTER_INFO_TYPE_UNKNOWN = 0,
    RTE_ETH_FDIR_FILTER_INPUT_SET_SELECT = 1,
    RTE_ETH_FDIR_FILTER_INFO_TYPE_MAX = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fdir_filter_info {
    pub info_type: Enum_rte_eth_fdir_filter_info_type,
    pub info: Union_Unnamed62,
}
impl ::std::clone::Clone for Struct_rte_eth_fdir_filter_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fdir_filter_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed62 {
    pub _bindgen_data_: [u32; 130usize],
}
impl Union_Unnamed62 {
    pub unsafe fn input_set_conf(&mut self)
     -> *mut Struct_rte_eth_input_set_conf {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed62 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed62 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_hash_filter_info_type {
    RTE_ETH_HASH_FILTER_INFO_TYPE_UNKNOWN = 0,
    RTE_ETH_HASH_FILTER_SYM_HASH_ENA_PER_PORT = 1,
    RTE_ETH_HASH_FILTER_GLOBAL_CONFIG = 2,
    RTE_ETH_HASH_FILTER_INPUT_SET_SELECT = 3,
    RTE_ETH_HASH_FILTER_INFO_TYPE_MAX = 4,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_hash_function {
    RTE_ETH_HASH_FUNCTION_DEFAULT = 0,
    RTE_ETH_HASH_FUNCTION_TOEPLITZ = 1,
    RTE_ETH_HASH_FUNCTION_SIMPLE_XOR = 2,
    RTE_ETH_HASH_FUNCTION_MAX = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_hash_global_conf {
    pub hash_func: Enum_rte_eth_hash_function,
    pub sym_hash_enable_mask: [uint32_t; 1usize],
    pub valid_bit_mask: [uint32_t; 1usize],
}
impl ::std::clone::Clone for Struct_rte_eth_hash_global_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_hash_global_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_hash_filter_info {
    pub info_type: Enum_rte_eth_hash_filter_info_type,
    pub info: Union_Unnamed63,
}
impl ::std::clone::Clone for Struct_rte_eth_hash_filter_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_hash_filter_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed63 {
    pub _bindgen_data_: [u32; 130usize],
}
impl Union_Unnamed63 {
    pub unsafe fn enable(&mut self) -> *mut uint8_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn global_conf(&mut self)
     -> *mut Struct_rte_eth_hash_global_conf {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn input_set_conf(&mut self)
     -> *mut Struct_rte_eth_input_set_conf {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed63 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed63 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_l2_tunnel_conf {
    pub l2_tunnel_type: Enum_rte_eth_tunnel_type,
    pub ether_type: uint16_t,
    pub tunnel_id: uint32_t,
    pub vf_id: uint16_t,
    pub pool: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_eth_l2_tunnel_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_l2_tunnel_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_dev_reg_info {
    pub data: *mut ::std::os::raw::c_void,
    pub offset: uint32_t,
    pub length: uint32_t,
    pub version: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_dev_reg_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_dev_reg_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_dev_eeprom_info {
    pub data: *mut ::std::os::raw::c_void,
    pub offset: uint32_t,
    pub length: uint32_t,
    pub magic: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_dev_eeprom_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_dev_eeprom_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_stats {
    pub ipackets: uint64_t,
    pub opackets: uint64_t,
    pub ibytes: uint64_t,
    pub obytes: uint64_t,
    pub imissed: uint64_t,
    pub ibadcrc: uint64_t,
    pub ibadlen: uint64_t,
    pub ierrors: uint64_t,
    pub oerrors: uint64_t,
    pub imcasts: uint64_t,
    pub rx_nombuf: uint64_t,
    pub fdirmatch: uint64_t,
    pub fdirmiss: uint64_t,
    pub tx_pause_xon: uint64_t,
    pub rx_pause_xon: uint64_t,
    pub tx_pause_xoff: uint64_t,
    pub rx_pause_xoff: uint64_t,
    pub q_ipackets: [uint64_t; 16usize],
    pub q_opackets: [uint64_t; 16usize],
    pub q_ibytes: [uint64_t; 16usize],
    pub q_obytes: [uint64_t; 16usize],
    pub q_errors: [uint64_t; 16usize],
    pub ilbpackets: uint64_t,
    pub olbpackets: uint64_t,
    pub ilbbytes: uint64_t,
    pub olbbytes: uint64_t,
}
impl ::std::clone::Clone for Struct_rte_eth_stats {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_stats {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_link {
    pub link_speed: uint32_t,
    pub _bindgen_bitfield_1_: uint16_t,
    pub _bindgen_bitfield_2_: uint16_t,
    pub _bindgen_bitfield_3_: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_link {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_link {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_thresh {
    pub pthresh: uint8_t,
    pub hthresh: uint8_t,
    pub wthresh: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_thresh {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_thresh {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_rx_mq_mode {
    ETH_MQ_RX_NONE = 0,
    ETH_MQ_RX_RSS = 1,
    ETH_MQ_RX_DCB = 2,
    ETH_MQ_RX_DCB_RSS = 3,
    ETH_MQ_RX_VMDQ_ONLY = 4,
    ETH_MQ_RX_VMDQ_RSS = 5,
    ETH_MQ_RX_VMDQ_DCB = 6,
    ETH_MQ_RX_VMDQ_DCB_RSS = 7,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_tx_mq_mode {
    ETH_MQ_TX_NONE = 0,
    ETH_MQ_TX_DCB = 1,
    ETH_MQ_TX_VMDQ_DCB = 2,
    ETH_MQ_TX_VMDQ_ONLY = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rxmode {
    pub mq_mode: Enum_rte_eth_rx_mq_mode,
    pub max_rx_pkt_len: uint32_t,
    pub split_hdr_size: uint16_t,
    pub _bindgen_bitfield_1_: uint16_t,
    pub _bindgen_bitfield_2_: uint16_t,
    pub _bindgen_bitfield_3_: uint16_t,
    pub _bindgen_bitfield_4_: uint16_t,
    pub _bindgen_bitfield_5_: uint16_t,
    pub _bindgen_bitfield_6_: uint16_t,
    pub _bindgen_bitfield_7_: uint16_t,
    pub _bindgen_bitfield_8_: uint16_t,
    pub _bindgen_bitfield_9_: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_rxmode {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_rxmode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_vlan_type {
    ETH_VLAN_TYPE_UNKNOWN = 0,
    ETH_VLAN_TYPE_INNER = 1,
    ETH_VLAN_TYPE_OUTER = 2,
    ETH_VLAN_TYPE_MAX = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rss_conf {
    pub rss_key: *mut uint8_t,
    pub rss_key_len: uint8_t,
    pub rss_hf: uint64_t,
}
impl ::std::clone::Clone for Struct_rte_eth_rss_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_rss_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vlan_mirror {
    pub vlan_mask: uint64_t,
    pub vlan_id: [uint16_t; 64usize],
}
impl ::std::clone::Clone for Struct_rte_eth_vlan_mirror {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_vlan_mirror {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_mirror_conf {
    pub rule_type: uint8_t,
    pub dst_pool: uint8_t,
    pub pool_mask: uint64_t,
    pub vlan: Struct_rte_eth_vlan_mirror,
}
impl ::std::clone::Clone for Struct_rte_eth_mirror_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_mirror_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rss_reta_entry64 {
    pub mask: uint64_t,
    pub reta: [uint16_t; 64usize],
}
impl ::std::clone::Clone for Struct_rte_eth_rss_reta_entry64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_rss_reta_entry64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_nb_tcs { ETH_4_TCS = 4, ETH_8_TCS = 8, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_nb_pools {
    ETH_8_POOLS = 8,
    ETH_16_POOLS = 16,
    ETH_32_POOLS = 32,
    ETH_64_POOLS = 64,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dcb_rx_conf {
    pub nb_tcs: Enum_rte_eth_nb_tcs,
    pub dcb_tc: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_rte_eth_dcb_rx_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dcb_rx_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vmdq_dcb_tx_conf {
    pub nb_queue_pools: Enum_rte_eth_nb_pools,
    pub dcb_tc: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_rte_eth_vmdq_dcb_tx_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_vmdq_dcb_tx_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dcb_tx_conf {
    pub nb_tcs: Enum_rte_eth_nb_tcs,
    pub dcb_tc: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_rte_eth_dcb_tx_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dcb_tx_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vmdq_tx_conf {
    pub nb_queue_pools: Enum_rte_eth_nb_pools,
}
impl ::std::clone::Clone for Struct_rte_eth_vmdq_tx_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_vmdq_tx_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vmdq_dcb_conf {
    pub nb_queue_pools: Enum_rte_eth_nb_pools,
    pub enable_default_pool: uint8_t,
    pub default_pool: uint8_t,
    pub nb_pool_maps: uint8_t,
    pub pool_map: [Struct_Unnamed64; 64usize],
    pub dcb_tc: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_rte_eth_vmdq_dcb_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_vmdq_dcb_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed64 {
    pub vlan_id: uint16_t,
    pub pools: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_vmdq_rx_conf {
    pub nb_queue_pools: Enum_rte_eth_nb_pools,
    pub enable_default_pool: uint8_t,
    pub default_pool: uint8_t,
    pub enable_loop_back: uint8_t,
    pub nb_pool_maps: uint8_t,
    pub rx_mode: uint32_t,
    pub pool_map: [Struct_Unnamed65; 64usize],
}
impl ::std::clone::Clone for Struct_rte_eth_vmdq_rx_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_vmdq_rx_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed65 {
    pub vlan_id: uint16_t,
    pub pools: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed65 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed65 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_txmode {
    pub mq_mode: Enum_rte_eth_tx_mq_mode,
    pub pvid: uint16_t,
    pub _bindgen_bitfield_1_: uint8_t,
    pub _bindgen_bitfield_2_: uint8_t,
    pub _bindgen_bitfield_3_: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_txmode {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_txmode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rxconf {
    pub rx_thresh: Struct_rte_eth_thresh,
    pub rx_free_thresh: uint16_t,
    pub rx_drop_en: uint8_t,
    pub rx_deferred_start: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_rxconf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_rxconf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_txconf {
    pub tx_thresh: Struct_rte_eth_thresh,
    pub tx_rs_thresh: uint16_t,
    pub tx_free_thresh: uint16_t,
    pub txq_flags: uint32_t,
    pub tx_deferred_start: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_txconf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_txconf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_desc_lim {
    pub nb_max: uint16_t,
    pub nb_min: uint16_t,
    pub nb_align: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_desc_lim {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_desc_lim {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_fc_mode {
    RTE_FC_NONE = 0,
    RTE_FC_RX_PAUSE = 1,
    RTE_FC_TX_PAUSE = 2,
    RTE_FC_FULL = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_fc_conf {
    pub high_water: uint32_t,
    pub low_water: uint32_t,
    pub pause_time: uint16_t,
    pub send_xon: uint16_t,
    pub mode: Enum_rte_eth_fc_mode,
    pub mac_ctrl_frame_fwd: uint8_t,
    pub autoneg: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_fc_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_fc_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_pfc_conf {
    pub fc: Struct_rte_eth_fc_conf,
    pub priority: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_pfc_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_pfc_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_fdir_pballoc_type {
    RTE_FDIR_PBALLOC_64K = 0,
    RTE_FDIR_PBALLOC_128K = 1,
    RTE_FDIR_PBALLOC_256K = 2,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_fdir_status_mode {
    RTE_FDIR_NO_REPORT_STATUS = 0,
    RTE_FDIR_REPORT_STATUS = 1,
    RTE_FDIR_REPORT_STATUS_ALWAYS = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_fdir_conf {
    pub mode: Enum_rte_fdir_mode,
    pub pballoc: Enum_rte_fdir_pballoc_type,
    pub status: Enum_rte_fdir_status_mode,
    pub drop_queue: uint8_t,
    pub mask: Struct_rte_eth_fdir_masks,
    pub flex_conf: Struct_rte_eth_fdir_flex_conf,
}
impl ::std::clone::Clone for Struct_rte_fdir_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_fdir_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_udp_tunnel {
    pub udp_port: uint16_t,
    pub prot_type: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_eth_udp_tunnel {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_udp_tunnel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_intr_conf {
    pub lsc: uint16_t,
    pub rxq: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_intr_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_intr_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_conf {
    pub link_speeds: uint32_t,
    pub rxmode: Struct_rte_eth_rxmode,
    pub txmode: Struct_rte_eth_txmode,
    pub lpbk_mode: uint32_t,
    pub rx_adv_conf: Struct_Unnamed66,
    pub tx_adv_conf: Union_Unnamed67,
    pub dcb_capability_en: uint32_t,
    pub fdir_conf: Struct_rte_fdir_conf,
    pub intr_conf: Struct_rte_intr_conf,
}
impl ::std::clone::Clone for Struct_rte_eth_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed66 {
    pub rss_conf: Struct_rte_eth_rss_conf,
    pub vmdq_dcb_conf: Struct_rte_eth_vmdq_dcb_conf,
    pub dcb_rx_conf: Struct_rte_eth_dcb_rx_conf,
    pub vmdq_rx_conf: Struct_rte_eth_vmdq_rx_conf,
}
impl ::std::clone::Clone for Struct_Unnamed66 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed66 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed67 {
    pub _bindgen_data_: [u32; 3usize],
}
impl Union_Unnamed67 {
    pub unsafe fn vmdq_dcb_tx_conf(&mut self)
     -> *mut Struct_rte_eth_vmdq_dcb_tx_conf {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn dcb_tx_conf(&mut self) -> *mut Struct_rte_eth_dcb_tx_conf {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn vmdq_tx_conf(&mut self)
     -> *mut Struct_rte_eth_vmdq_tx_conf {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed67 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed67 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev_info {
    pub pci_dev: *mut Struct_rte_pci_device,
    pub driver_name: *const ::std::os::raw::c_char,
    pub if_index: ::std::os::raw::c_uint,
    pub min_rx_bufsize: uint32_t,
    pub max_rx_pktlen: uint32_t,
    pub max_rx_queues: uint16_t,
    pub max_tx_queues: uint16_t,
    pub max_mac_addrs: uint32_t,
    pub max_hash_mac_addrs: uint32_t,
    pub max_vfs: uint16_t,
    pub max_vmdq_pools: uint16_t,
    pub rx_offload_capa: uint32_t,
    pub tx_offload_capa: uint32_t,
    pub reta_size: uint16_t,
    pub hash_key_size: uint8_t,
    pub flow_type_rss_offloads: uint64_t,
    pub default_rxconf: Struct_rte_eth_rxconf,
    pub default_txconf: Struct_rte_eth_txconf,
    pub vmdq_queue_base: uint16_t,
    pub vmdq_queue_num: uint16_t,
    pub vmdq_pool_base: uint16_t,
    pub rx_desc_lim: Struct_rte_eth_desc_lim,
    pub tx_desc_lim: Struct_rte_eth_desc_lim,
    pub speed_capa: uint32_t,
}
impl ::std::clone::Clone for Struct_rte_eth_dev_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dev_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rxq_info {
    pub mp: *mut Struct_rte_mempool,
    pub conf: Struct_rte_eth_rxconf,
    pub scattered_rx: uint8_t,
    pub nb_desc: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_rxq_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_rxq_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_txq_info {
    pub conf: Struct_rte_eth_txconf,
    pub nb_desc: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_txq_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_txq_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_xstats {
    pub name: [::std::os::raw::c_char; 64usize],
    pub value: uint64_t,
}
impl ::std::clone::Clone for Struct_rte_eth_xstats {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_xstats {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dcb_tc_queue_mapping {
    pub tc_rxq: [[Struct_Unnamed68; 8usize]; 64usize],
    pub tc_txq: [[Struct_Unnamed69; 8usize]; 64usize],
}
impl ::std::clone::Clone for Struct_rte_eth_dcb_tc_queue_mapping {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dcb_tc_queue_mapping {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed68 {
    pub base: uint8_t,
    pub nb_queue: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed68 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed68 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed69 {
    pub base: uint8_t,
    pub nb_queue: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed69 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed69 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dcb_info {
    pub nb_tcs: uint8_t,
    pub prio_tc: [uint8_t; 8usize],
    pub tc_bws: [uint8_t; 8usize],
    pub tc_queue: Struct_rte_eth_dcb_tc_queue_mapping,
}
impl ::std::clone::Clone for Struct_rte_eth_dcb_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dcb_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_rte_eth_dev_callback { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev_cb_list {
    pub tqh_first: *mut Struct_rte_eth_dev_callback,
    pub tqh_last: *mut *mut Struct_rte_eth_dev_callback,
}
impl ::std::clone::Clone for Struct_rte_eth_dev_cb_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dev_cb_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type eth_dev_configure_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_dev_start_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_dev_stop_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)>;
pub type eth_dev_set_link_up_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_dev_set_link_down_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_dev_close_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)>;
pub type eth_promiscuous_enable_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)>;
pub type eth_promiscuous_disable_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)>;
pub type eth_allmulticast_enable_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)>;
pub type eth_allmulticast_disable_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)>;
pub type eth_link_update_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               wait_to_complete:
                                                   ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type eth_stats_get_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               igb_stats:
                                                   *mut Struct_rte_eth_stats)>;
pub type eth_stats_reset_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)>;
pub type eth_xstats_get_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               stats:
                                                   *mut Struct_rte_eth_xstats,
                                               n: ::std::os::raw::c_uint)
                              -> ::std::os::raw::c_int>;
pub type eth_xstats_reset_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)>;
pub type eth_queue_stats_mapping_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               queue_id: uint16_t,
                                               stat_idx: uint8_t,
                                               is_rx: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_dev_infos_get_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               dev_info:
                                                   *mut Struct_rte_eth_dev_info)>;
pub type eth_dev_supported_ptypes_get_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> *const uint32_t>;
pub type eth_queue_start_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               queue_id: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type eth_queue_stop_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               queue_id: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type eth_rx_queue_setup_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               rx_queue_id: uint16_t,
                                               nb_rx_desc: uint16_t,
                                               socket_id:
                                                   ::std::os::raw::c_uint,
                                               rx_conf:
                                                   *const Struct_rte_eth_rxconf,
                                               mb_pool:
                                                   *mut Struct_rte_mempool)
                              -> ::std::os::raw::c_int>;
pub type eth_tx_queue_setup_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               tx_queue_id: uint16_t,
                                               nb_tx_desc: uint16_t,
                                               socket_id:
                                                   ::std::os::raw::c_uint,
                                               tx_conf:
                                                   *const Struct_rte_eth_txconf)
                              -> ::std::os::raw::c_int>;
pub type eth_rx_enable_intr_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               rx_queue_id: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type eth_rx_disable_intr_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               rx_queue_id: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type eth_queue_release_t =
    ::std::option::Option<unsafe extern "C" fn(queue:
                                                   *mut ::std::os::raw::c_void)>;
pub type eth_rx_queue_count_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               rx_queue_id: uint16_t)
                              -> uint32_t>;
pub type eth_rx_descriptor_done_t =
    ::std::option::Option<unsafe extern "C" fn(rxq:
                                                   *mut ::std::os::raw::c_void,
                                               offset: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type eth_rxq_info_get_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               rx_queue_id: uint16_t,
                                               qinfo:
                                                   *mut Struct_rte_eth_rxq_info)>;
pub type eth_txq_info_get_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               tx_queue_id: uint16_t,
                                               qinfo:
                                                   *mut Struct_rte_eth_txq_info)>;
pub type mtu_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               mtu: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type vlan_filter_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               vlan_id: uint16_t,
                                               on: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type vlan_tpid_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               _type: Enum_rte_vlan_type,
                                               tpid: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type vlan_offload_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               mask: ::std::os::raw::c_int)>;
pub type vlan_pvid_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               vlan_id: uint16_t,
                                               on: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type vlan_strip_queue_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               rx_queue_id: uint16_t,
                                               on: ::std::os::raw::c_int)>;
pub type eth_rx_burst_t =
    ::std::option::Option<unsafe extern "C" fn(rxq:
                                                   *mut ::std::os::raw::c_void,
                                               rx_pkts:
                                                   *mut *mut Struct_rte_mbuf,
                                               nb_pkts: uint16_t)
                              -> uint16_t>;
pub type eth_tx_burst_t =
    ::std::option::Option<unsafe extern "C" fn(txq:
                                                   *mut ::std::os::raw::c_void,
                                               tx_pkts:
                                                   *mut *mut Struct_rte_mbuf,
                                               nb_pkts: uint16_t)
                              -> uint16_t>;
pub type flow_ctrl_get_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               fc_conf:
                                                   *mut Struct_rte_eth_fc_conf)
                              -> ::std::os::raw::c_int>;
pub type flow_ctrl_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               fc_conf:
                                                   *mut Struct_rte_eth_fc_conf)
                              -> ::std::os::raw::c_int>;
pub type priority_flow_ctrl_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               pfc_conf:
                                                   *mut Struct_rte_eth_pfc_conf)
                              -> ::std::os::raw::c_int>;
pub type reta_update_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               reta_conf:
                                                   *mut Struct_rte_eth_rss_reta_entry64,
                                               reta_size: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type reta_query_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               reta_conf:
                                                   *mut Struct_rte_eth_rss_reta_entry64,
                                               reta_size: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type rss_hash_update_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               rss_conf:
                                                   *mut Struct_rte_eth_rss_conf)
                              -> ::std::os::raw::c_int>;
pub type rss_hash_conf_get_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               rss_conf:
                                                   *mut Struct_rte_eth_rss_conf)
                              -> ::std::os::raw::c_int>;
pub type eth_dev_led_on_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_dev_led_off_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_mac_addr_remove_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               index: uint32_t)>;
pub type eth_mac_addr_add_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               mac_addr:
                                                   *mut Struct_ether_addr,
                                               index: uint32_t,
                                               vmdq: uint32_t)>;
pub type eth_mac_addr_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               mac_addr:
                                                   *mut Struct_ether_addr)>;
pub type eth_uc_hash_table_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               mac_addr:
                                                   *mut Struct_ether_addr,
                                               on: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_uc_all_hash_table_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               on: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_set_vf_rx_mode_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               vf: uint16_t,
                                               rx_mode: uint16_t, on: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_set_vf_rx_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               vf: uint16_t, on: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_set_vf_tx_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               vf: uint16_t, on: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_set_vf_vlan_filter_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               vlan: uint16_t,
                                               vf_mask: uint64_t,
                                               vlan_on: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_set_queue_rate_limit_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               queue_idx: uint16_t,
                                               tx_rate: uint16_t)
                              -> ::std::os::raw::c_int>;
pub type eth_set_vf_rate_limit_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               vf: uint16_t,
                                               tx_rate: uint16_t,
                                               q_msk: uint64_t)
                              -> ::std::os::raw::c_int>;
pub type eth_mirror_rule_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               mirror_conf:
                                                   *mut Struct_rte_eth_mirror_conf,
                                               rule_id: uint8_t, on: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_mirror_rule_reset_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               rule_id: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_udp_tunnel_port_add_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               tunnel_udp:
                                                   *mut Struct_rte_eth_udp_tunnel)
                              -> ::std::os::raw::c_int>;
pub type eth_udp_tunnel_port_del_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               tunnel_udp:
                                                   *mut Struct_rte_eth_udp_tunnel)
                              -> ::std::os::raw::c_int>;
pub type eth_set_mc_addr_list_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               mc_addr_set:
                                                   *mut Struct_ether_addr,
                                               nb_mc_addr: uint32_t)
                              -> ::std::os::raw::c_int>;
pub type eth_timesync_enable_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_timesync_disable_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_timesync_read_rx_timestamp_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               timestamp:
                                                   *mut Struct_timespec,
                                               flags: uint32_t)
                              -> ::std::os::raw::c_int>;
pub type eth_timesync_read_tx_timestamp_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               timestamp:
                                                   *mut Struct_timespec)
                              -> ::std::os::raw::c_int>;
pub type eth_timesync_adjust_time =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               arg1: int64_t)
                              -> ::std::os::raw::c_int>;
pub type eth_timesync_read_time =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               timestamp:
                                                   *mut Struct_timespec)
                              -> ::std::os::raw::c_int>;
pub type eth_timesync_write_time =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               timestamp:
                                                   *const Struct_timespec)
                              -> ::std::os::raw::c_int>;
pub type eth_get_reg_length_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_get_reg_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               info:
                                                   *mut Struct_rte_dev_reg_info)
                              -> ::std::os::raw::c_int>;
pub type eth_get_eeprom_length_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_get_eeprom_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               info:
                                                   *mut Struct_rte_dev_eeprom_info)
                              -> ::std::os::raw::c_int>;
pub type eth_set_eeprom_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               info:
                                                   *mut Struct_rte_dev_eeprom_info)
                              -> ::std::os::raw::c_int>;
pub type eth_l2_tunnel_eth_type_conf_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               l2_tunnel:
                                                   *mut Struct_rte_eth_l2_tunnel_conf)
                              -> ::std::os::raw::c_int>;
pub type eth_l2_tunnel_offload_set_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               l2_tunnel:
                                                   *mut Struct_rte_eth_l2_tunnel_conf,
                                               mask: uint32_t, en: uint8_t)
                              -> ::std::os::raw::c_int>;
pub type eth_filter_ctrl_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               filter_type:
                                                   Enum_rte_filter_type,
                                               filter_op: Enum_rte_filter_op,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type eth_get_dcb_info =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut Struct_rte_eth_dev,
                                               dcb_info:
                                                   *mut Struct_rte_eth_dcb_info)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_eth_dev_ops {
    pub dev_configure: eth_dev_configure_t,
    pub dev_start: eth_dev_start_t,
    pub dev_stop: eth_dev_stop_t,
    pub dev_set_link_up: eth_dev_set_link_up_t,
    pub dev_set_link_down: eth_dev_set_link_down_t,
    pub dev_close: eth_dev_close_t,
    pub promiscuous_enable: eth_promiscuous_enable_t,
    pub promiscuous_disable: eth_promiscuous_disable_t,
    pub allmulticast_enable: eth_allmulticast_enable_t,
    pub allmulticast_disable: eth_allmulticast_disable_t,
    pub link_update: eth_link_update_t,
    pub stats_get: eth_stats_get_t,
    pub stats_reset: eth_stats_reset_t,
    pub xstats_get: eth_xstats_get_t,
    pub xstats_reset: eth_xstats_reset_t,
    pub queue_stats_mapping_set: eth_queue_stats_mapping_set_t,
    pub dev_infos_get: eth_dev_infos_get_t,
    pub dev_supported_ptypes_get: eth_dev_supported_ptypes_get_t,
    pub mtu_set: mtu_set_t,
    pub vlan_filter_set: vlan_filter_set_t,
    pub vlan_tpid_set: vlan_tpid_set_t,
    pub vlan_strip_queue_set: vlan_strip_queue_set_t,
    pub vlan_offload_set: vlan_offload_set_t,
    pub vlan_pvid_set: vlan_pvid_set_t,
    pub rx_queue_start: eth_queue_start_t,
    pub rx_queue_stop: eth_queue_stop_t,
    pub tx_queue_start: eth_queue_start_t,
    pub tx_queue_stop: eth_queue_stop_t,
    pub rx_queue_setup: eth_rx_queue_setup_t,
    pub rx_queue_release: eth_queue_release_t,
    pub rx_queue_count: eth_rx_queue_count_t,
    pub rx_descriptor_done: eth_rx_descriptor_done_t,
    pub rx_queue_intr_enable: eth_rx_enable_intr_t,
    pub rx_queue_intr_disable: eth_rx_disable_intr_t,
    pub tx_queue_setup: eth_tx_queue_setup_t,
    pub tx_queue_release: eth_queue_release_t,
    pub dev_led_on: eth_dev_led_on_t,
    pub dev_led_off: eth_dev_led_off_t,
    pub flow_ctrl_get: flow_ctrl_get_t,
    pub flow_ctrl_set: flow_ctrl_set_t,
    pub priority_flow_ctrl_set: priority_flow_ctrl_set_t,
    pub mac_addr_remove: eth_mac_addr_remove_t,
    pub mac_addr_add: eth_mac_addr_add_t,
    pub mac_addr_set: eth_mac_addr_set_t,
    pub uc_hash_table_set: eth_uc_hash_table_set_t,
    pub uc_all_hash_table_set: eth_uc_all_hash_table_set_t,
    pub mirror_rule_set: eth_mirror_rule_set_t,
    pub mirror_rule_reset: eth_mirror_rule_reset_t,
    pub set_vf_rx_mode: eth_set_vf_rx_mode_t,
    pub set_vf_rx: eth_set_vf_rx_t,
    pub set_vf_tx: eth_set_vf_tx_t,
    pub set_vf_vlan_filter: eth_set_vf_vlan_filter_t,
    pub udp_tunnel_port_add: eth_udp_tunnel_port_add_t,
    pub udp_tunnel_port_del: eth_udp_tunnel_port_del_t,
    pub set_queue_rate_limit: eth_set_queue_rate_limit_t,
    pub set_vf_rate_limit: eth_set_vf_rate_limit_t,
    pub reta_update: reta_update_t,
    pub reta_query: reta_query_t,
    pub get_reg_length: eth_get_reg_length_t,
    pub get_reg: eth_get_reg_t,
    pub get_eeprom_length: eth_get_eeprom_length_t,
    pub get_eeprom: eth_get_eeprom_t,
    pub set_eeprom: eth_set_eeprom_t,
    pub rss_hash_update: rss_hash_update_t,
    pub rss_hash_conf_get: rss_hash_conf_get_t,
    pub filter_ctrl: eth_filter_ctrl_t,
    pub set_mc_addr_list: eth_set_mc_addr_list_t,
    pub rxq_info_get: eth_rxq_info_get_t,
    pub txq_info_get: eth_txq_info_get_t,
    pub timesync_enable: eth_timesync_enable_t,
    pub timesync_disable: eth_timesync_disable_t,
    pub timesync_read_rx_timestamp: eth_timesync_read_rx_timestamp_t,
    pub timesync_read_tx_timestamp: eth_timesync_read_tx_timestamp_t,
    pub get_dcb_info: eth_get_dcb_info,
    pub timesync_adjust_time: eth_timesync_adjust_time,
    pub timesync_read_time: eth_timesync_read_time,
    pub timesync_write_time: eth_timesync_write_time,
    pub l2_tunnel_eth_type_conf: eth_l2_tunnel_eth_type_conf_t,
    pub l2_tunnel_offload_set: eth_l2_tunnel_offload_set_t,
}
impl ::std::clone::Clone for Struct_eth_dev_ops {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_eth_dev_ops {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rte_rx_callback_fn =
    ::std::option::Option<unsafe extern "C" fn(port: uint8_t, queue: uint16_t,
                                               pkts:
                                                   *mut *mut Struct_rte_mbuf,
                                               nb_pkts: uint16_t,
                                               max_pkts: uint16_t,
                                               user_param:
                                                   *mut ::std::os::raw::c_void)
                              -> uint16_t>;
pub type rte_tx_callback_fn =
    ::std::option::Option<unsafe extern "C" fn(port: uint8_t, queue: uint16_t,
                                               pkts:
                                                   *mut *mut Struct_rte_mbuf,
                                               nb_pkts: uint16_t,
                                               user_param:
                                                   *mut ::std::os::raw::c_void)
                              -> uint16_t>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_rxtx_callback {
    pub next: *mut Struct_rte_eth_rxtx_callback,
    pub _fn: Union_Unnamed70,
    pub param: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_rte_eth_rxtx_callback {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_rxtx_callback {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed70 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed70 {
    pub unsafe fn rx(&mut self) -> *mut rte_rx_callback_fn {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn tx(&mut self) -> *mut rte_tx_callback_fn {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed70 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed70 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_dev_type {
    RTE_ETH_DEV_UNKNOWN = 0,
    RTE_ETH_DEV_PCI = 1,
    RTE_ETH_DEV_VIRTUAL = 2,
    RTE_ETH_DEV_MAX = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev {
    pub rx_pkt_burst: eth_rx_burst_t,
    pub tx_pkt_burst: eth_tx_burst_t,
    pub data: *mut Struct_rte_eth_dev_data,
    pub driver: *const Struct_eth_driver,
    pub dev_ops: *const Struct_eth_dev_ops,
    pub pci_dev: *mut Struct_rte_pci_device,
    pub link_intr_cbs: Struct_rte_eth_dev_cb_list,
    pub post_rx_burst_cbs: [*mut Struct_rte_eth_rxtx_callback; 1024usize],
    pub pre_tx_burst_cbs: [*mut Struct_rte_eth_rxtx_callback; 1024usize],
    pub attached: uint8_t,
    pub dev_type: Enum_rte_eth_dev_type,
}
impl ::std::clone::Clone for Struct_rte_eth_dev {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dev {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev_sriov {
    pub active: uint8_t,
    pub nb_q_per_pool: uint8_t,
    pub def_vmdq_idx: uint16_t,
    pub def_pool_q_idx: uint16_t,
}
impl ::std::clone::Clone for Struct_rte_eth_dev_sriov {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dev_sriov {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev_data {
    pub name: [::std::os::raw::c_char; 32usize],
    pub rx_queues: *mut *mut ::std::os::raw::c_void,
    pub tx_queues: *mut *mut ::std::os::raw::c_void,
    pub nb_rx_queues: uint16_t,
    pub nb_tx_queues: uint16_t,
    pub sriov: Struct_rte_eth_dev_sriov,
    pub dev_private: *mut ::std::os::raw::c_void,
    pub dev_link: Struct_rte_eth_link,
    pub dev_conf: Struct_rte_eth_conf,
    pub mtu: uint16_t,
    pub min_rx_buf_size: uint32_t,
    pub rx_mbuf_alloc_failed: uint64_t,
    pub mac_addrs: *mut Struct_ether_addr,
    pub mac_pool_sel: [uint64_t; 128usize],
    pub hash_mac_addrs: *mut Struct_ether_addr,
    pub port_id: uint8_t,
    pub _bindgen_bitfield_1_: uint8_t,
    pub _bindgen_bitfield_2_: uint8_t,
    pub _bindgen_bitfield_3_: uint8_t,
    pub _bindgen_bitfield_4_: uint8_t,
    pub _bindgen_bitfield_5_: uint8_t,
    pub rx_queue_state: [uint8_t; 1024usize],
    pub tx_queue_state: [uint8_t; 1024usize],
    pub dev_flags: uint32_t,
    pub kdrv: Enum_rte_kernel_driver,
    pub numa_node: ::std::os::raw::c_int,
    pub drv_name: *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_rte_eth_dev_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dev_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type eth_dev_init_t =
    ::std::option::Option<unsafe extern "C" fn(eth_dev:
                                                   *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
pub type eth_dev_uninit_t =
    ::std::option::Option<unsafe extern "C" fn(eth_dev:
                                                   *mut Struct_rte_eth_dev)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_eth_driver {
    pub pci_drv: Struct_rte_pci_driver,
    pub eth_dev_init: eth_dev_init_t,
    pub eth_dev_uninit: eth_dev_uninit_t,
    pub dev_private_size: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_eth_driver {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_eth_driver {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type buffer_tx_error_fn =
    ::std::option::Option<unsafe extern "C" fn(unsent:
                                                   *mut *mut Struct_rte_mbuf,
                                               count: uint16_t,
                                               userdata:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_eth_dev_tx_buffer {
    pub error_callback: buffer_tx_error_fn,
    pub error_userdata: *mut ::std::os::raw::c_void,
    pub size: uint16_t,
    pub length: uint16_t,
    pub pkts: *mut *mut Struct_rte_mbuf,
}
impl ::std::clone::Clone for Struct_rte_eth_dev_tx_buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_eth_dev_tx_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_eth_event_type {
    RTE_ETH_EVENT_UNKNOWN = 0,
    RTE_ETH_EVENT_INTR_LSC = 1,
    RTE_ETH_EVENT_QUEUE_STATE = 2,
    RTE_ETH_EVENT_INTR_RESET = 3,
    RTE_ETH_EVENT_MAX = 4,
}
pub type rte_eth_dev_cb_fn =
    ::std::option::Option<unsafe extern "C" fn(port_id: uint8_t,
                                               event: Enum_rte_eth_event_type,
                                               cb_arg:
                                                   *mut ::std::os::raw::c_void)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rte_kni_req_id {
    RTE_KNI_REQ_UNKNOWN = 0,
    RTE_KNI_REQ_CHANGE_MTU = 1,
    RTE_KNI_REQ_CFG_NETWORK_IF = 2,
    RTE_KNI_REQ_MAX = 3,
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_rte_kni_request {
    pub req_id: uint32_t,
    pub _bindgen_data_1_: [u32; 1usize],
    pub result: int32_t,
}
impl Struct_rte_kni_request {
    pub unsafe fn new_mtu(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn if_up(&mut self) -> *mut uint8_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_rte_kni_request {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_kni_request {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_fifo {
    pub write: ::std::os::raw::c_uint,
    pub read: ::std::os::raw::c_uint,
    pub len: ::std::os::raw::c_uint,
    pub elem_size: ::std::os::raw::c_uint,
    pub buffer: [*mut ::std::os::raw::c_void; 0usize],
}
impl ::std::clone::Clone for Struct_rte_kni_fifo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_kni_fifo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_mbuf {
    pub buf_addr: *mut ::std::os::raw::c_void,
    pub pad0: [::std::os::raw::c_char; 10usize],
    pub data_off: uint16_t,
    pub pad1: [::std::os::raw::c_char; 4usize],
    pub ol_flags: uint64_t,
    pub pad2: [::std::os::raw::c_char; 4usize],
    pub pkt_len: uint32_t,
    pub data_len: uint16_t,
    pub pad3: [::std::os::raw::c_char; 8usize],
    pub pool: *mut ::std::os::raw::c_void,
    pub next: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_rte_kni_mbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_kni_mbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_device_info {
    pub name: [::std::os::raw::c_char; 32usize],
    pub tx_phys: phys_addr_t,
    pub rx_phys: phys_addr_t,
    pub alloc_phys: phys_addr_t,
    pub free_phys: phys_addr_t,
    pub req_phys: phys_addr_t,
    pub resp_phys: phys_addr_t,
    pub sync_phys: phys_addr_t,
    pub sync_va: *mut ::std::os::raw::c_void,
    pub mbuf_va: *mut ::std::os::raw::c_void,
    pub mbuf_phys: phys_addr_t,
    pub vendor_id: uint16_t,
    pub device_id: uint16_t,
    pub bus: uint8_t,
    pub devid: uint8_t,
    pub function: uint8_t,
    pub group_id: uint16_t,
    pub core_id: uint32_t,
    pub _bindgen_bitfield_1_: uint8_t,
    pub mbuf_size: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_rte_kni_device_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_kni_device_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_rte_kni { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_ops {
    pub port_id: uint8_t,
    pub change_mtu: ::std::option::Option<extern "C" fn(port_id: uint8_t,
                                                        new_mtu:
                                                            ::std::os::raw::c_uint)
                                              -> ::std::os::raw::c_int>,
    pub config_network_if: ::std::option::Option<extern "C" fn(port_id:
                                                                   uint8_t,
                                                               if_up: uint8_t)
                                                     ->
                                                         ::std::os::raw::c_int>,
}
impl ::std::clone::Clone for Struct_rte_kni_ops {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_kni_ops {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rte_kni_conf {
    pub name: [::std::os::raw::c_char; 32usize],
    pub core_id: uint32_t,
    pub group_id: uint16_t,
    pub mbuf_size: ::std::os::raw::c_uint,
    pub addr: Struct_rte_pci_addr,
    pub id: Struct_rte_pci_id,
    pub _bindgen_bitfield_1_: uint8_t,
}
impl ::std::clone::Clone for Struct_rte_kni_conf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rte_kni_conf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_arp_ipv4 {
    pub arp_sha: Struct_ether_addr,
    pub arp_sip: uint32_t,
    pub arp_tha: Struct_ether_addr,
    pub arp_tip: uint32_t,
}
impl ::std::clone::Clone for Struct_arp_ipv4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_arp_ipv4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_arp_hdr {
    pub arp_hrd: uint16_t,
    pub arp_pro: uint16_t,
    pub arp_hln: uint8_t,
    pub arp_pln: uint8_t,
    pub arp_op: uint16_t,
    pub arp_data: Struct_arp_ipv4,
}
impl ::std::clone::Clone for Struct_arp_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_arp_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
impl ::std::clone::Clone for Struct_iovec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_iovec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type socklen_t = __socklen_t;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum___socket_type {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2,
    SOCK_RAW = 3,
    SOCK_RDM = 4,
    SOCK_SEQPACKET = 5,
    SOCK_DCCP = 6,
    SOCK_PACKET = 10,
    SOCK_CLOEXEC = 524288,
    SOCK_NONBLOCK = 2048,
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
impl ::std::clone::Clone for Struct_sockaddr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: ::std::os::raw::c_ulong,
    pub __ss_padding: [::std::os::raw::c_char; 112usize],
}
impl ::std::clone::Clone for Struct_sockaddr_storage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr_storage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed71 {
    MSG_OOB = 1,
    MSG_PEEK = 2,
    MSG_DONTROUTE = 4,
    MSG_CTRUNC = 8,
    MSG_PROXY = 16,
    MSG_TRUNC = 32,
    MSG_DONTWAIT = 64,
    MSG_EOR = 128,
    MSG_WAITALL = 256,
    MSG_FIN = 512,
    MSG_SYN = 1024,
    MSG_CONFIRM = 2048,
    MSG_RST = 4096,
    MSG_ERRQUEUE = 8192,
    MSG_NOSIGNAL = 16384,
    MSG_MORE = 32768,
    MSG_WAITFORONE = 65536,
    MSG_CMSG_CLOEXEC = 1073741824,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut Struct_iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_msghdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_msghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: *mut ::std::os::raw::c_uchar,
}
impl ::std::clone::Clone for Struct_cmsghdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmsghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed72 { SCM_RIGHTS = 1, }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_linger {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_linger {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
impl ::std::clone::Clone for Struct_osockaddr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_osockaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed73 { SHUT_RD = 0, SHUT_WR = 1, SHUT_RDWR = 2, }
pub const IPPROTO_HOPOPTS: Enum_Unnamed74 = Enum_Unnamed74::IPPROTO_IP;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed74 {
    IPPROTO_IP = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_IPIP = 4,
    IPPROTO_TCP = 6,
    IPPROTO_EGP = 8,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_TP = 29,
    IPPROTO_DCCP = 33,
    IPPROTO_IPV6 = 41,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_RSVP = 46,
    IPPROTO_GRE = 47,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_MTP = 92,
    IPPROTO_ENCAP = 98,
    IPPROTO_PIM = 103,
    IPPROTO_COMP = 108,
    IPPROTO_SCTP = 132,
    IPPROTO_UDPLITE = 136,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
}
pub type in_port_t = uint16_t;
pub const IPPORT_BIFFUDP: Enum_Unnamed75 = Enum_Unnamed75::IPPORT_EXECSERVER;
pub const IPPORT_WHOSERVER: Enum_Unnamed75 =
    Enum_Unnamed75::IPPORT_LOGINSERVER;
pub const IPPORT_ROUTESERVER: Enum_Unnamed75 =
    Enum_Unnamed75::IPPORT_EFSSERVER;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed75 {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,
    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,
    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,
    IPPORT_RESERVED = 1024,
    IPPORT_USERRESERVED = 5000,
}
pub type in_addr_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_addr {
    pub s_addr: in_addr_t,
}
impl ::std::clone::Clone for Struct_in_addr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_in_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in6_addr {
    pub __in6_u: Union_Unnamed76,
}
impl ::std::clone::Clone for Struct_in6_addr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_in6_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed76 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed76 {
    pub unsafe fn __u6_addr8(&mut self) -> *mut [uint8_t; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr16(&mut self) -> *mut [uint16_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr32(&mut self) -> *mut [uint32_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed76 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed76 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: Struct_in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
impl ::std::clone::Clone for Struct_sockaddr_in {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr_in {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: uint32_t,
    pub sin6_addr: Struct_in6_addr,
    pub sin6_scope_id: uint32_t,
}
impl ::std::clone::Clone for Struct_sockaddr_in6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr_in6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
}
impl ::std::clone::Clone for Struct_ip_mreq {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq_source {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
    pub imr_sourceaddr: Struct_in_addr,
}
impl ::std::clone::Clone for Struct_ip_mreq_source {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip_mreq_source {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipv6_mreq {
    pub ipv6mr_multiaddr: Struct_in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_ipv6_mreq {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ipv6_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_req {
    pub gr_interface: uint32_t,
    pub gr_group: Struct_sockaddr_storage,
}
impl ::std::clone::Clone for Struct_group_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_group_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: Struct_sockaddr_storage,
    pub gsr_source: Struct_sockaddr_storage,
}
impl ::std::clone::Clone for Struct_group_source_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_group_source_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_msfilter {
    pub imsf_multiaddr: Struct_in_addr,
    pub imsf_interface: Struct_in_addr,
    pub imsf_fmode: uint32_t,
    pub imsf_numsrc: uint32_t,
    pub imsf_slist: [Struct_in_addr; 1usize],
}
impl ::std::clone::Clone for Struct_ip_msfilter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip_msfilter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_filter {
    pub gf_interface: uint32_t,
    pub gf_group: Struct_sockaddr_storage,
    pub gf_fmode: uint32_t,
    pub gf_numsrc: uint32_t,
    pub gf_slist: [Struct_sockaddr_storage; 1usize],
}
impl ::std::clone::Clone for Struct_group_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_group_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_opts {
    pub ip_dst: Struct_in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for Struct_ip_opts {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip_opts {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreqn {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_address: Struct_in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_ip_mreqn {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip_mreqn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: Struct_in_addr,
    pub ipi_addr: Struct_in_addr,
}
impl ::std::clone::Clone for Struct_in_pktinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_in_pktinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_ipv4_hdr {
    pub version_ihl: uint8_t,
    pub type_of_service: uint8_t,
    pub total_length: uint16_t,
    pub packet_id: uint16_t,
    pub fragment_offset: uint16_t,
    pub time_to_live: uint8_t,
    pub next_proto_id: uint8_t,
    pub hdr_checksum: uint16_t,
    pub src_addr: uint32_t,
    pub dst_addr: uint32_t,
}
impl ::std::clone::Clone for Struct_ipv4_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ipv4_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_ipv6_hdr {
    pub vtc_flow: uint32_t,
    pub payload_len: uint16_t,
    pub proto: uint8_t,
    pub hop_limits: uint8_t,
    pub src_addr: [uint8_t; 16usize],
    pub dst_addr: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_ipv6_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ipv6_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_icmp_hdr {
    pub icmp_type: uint8_t,
    pub icmp_code: uint8_t,
    pub icmp_cksum: uint16_t,
    pub icmp_ident: uint16_t,
    pub icmp_seq_nb: uint16_t,
}
impl ::std::clone::Clone for Struct_icmp_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_icmp_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_tcp_hdr {
    pub src_port: uint16_t,
    pub dst_port: uint16_t,
    pub sent_seq: uint32_t,
    pub recv_ack: uint32_t,
    pub data_off: uint8_t,
    pub tcp_flags: uint8_t,
    pub rx_win: uint16_t,
    pub cksum: uint16_t,
    pub tcp_urp: uint16_t,
}
impl ::std::clone::Clone for Struct_tcp_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tcp_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_udp_hdr {
    pub src_port: uint16_t,
    pub dst_port: uint16_t,
    pub dgram_len: uint16_t,
    pub dgram_cksum: uint16_t,
}
impl ::std::clone::Clone for Struct_udp_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_udp_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_sctp_hdr {
    pub src_port: uint16_t,
    pub dst_port: uint16_t,
    pub tag: uint32_t,
    pub cksum: uint32_t,
}
impl ::std::clone::Clone for Struct_sctp_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sctp_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cirbuf {
    pub maxlen: ::std::os::raw::c_uint,
    pub start: ::std::os::raw::c_uint,
    pub end: ::std::os::raw::c_uint,
    pub len: ::std::os::raw::c_uint,
    pub buf: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_cirbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cirbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_cmdline_vt100_parser_state {
    CMDLINE_VT100_INIT = 0,
    CMDLINE_VT100_ESCAPE = 1,
    CMDLINE_VT100_ESCAPE_CSI = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_vt100 {
    pub bufpos: uint8_t,
    pub buf: [::std::os::raw::c_char; 8usize],
    pub state: Enum_cmdline_vt100_parser_state,
}
impl ::std::clone::Clone for Struct_cmdline_vt100 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_vt100 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_rdline_status {
    RDLINE_INIT = 0,
    RDLINE_RUNNING = 1,
    RDLINE_EXITED = 2,
}
pub type rdline_write_char_t =
    unsafe extern "C" fn(rdl: *mut Struct_rdline,
                         arg1: ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
pub type rdline_validate_t =
    unsafe extern "C" fn(rdl: *mut Struct_rdline,
                         buf: *const ::std::os::raw::c_char,
                         size: ::std::os::raw::c_uint);
pub type rdline_complete_t =
    unsafe extern "C" fn(rdl: *mut Struct_rdline,
                         buf: *const ::std::os::raw::c_char,
                         dstbuf: *mut ::std::os::raw::c_char,
                         dstsize: ::std::os::raw::c_uint,
                         state: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rdline {
    pub status: Enum_rdline_status,
    pub left: Struct_cirbuf,
    pub right: Struct_cirbuf,
    pub left_buf: [::std::os::raw::c_char; 514usize],
    pub right_buf: [::std::os::raw::c_char; 512usize],
    pub prompt: [::std::os::raw::c_char; 32usize],
    pub prompt_size: ::std::os::raw::c_uint,
    pub kill_buf: [::std::os::raw::c_char; 512usize],
    pub kill_size: ::std::os::raw::c_uint,
    pub history: Struct_cirbuf,
    pub history_buf: [::std::os::raw::c_char; 8192usize],
    pub history_cur_line: ::std::os::raw::c_int,
    pub write_char: *mut rdline_write_char_t,
    pub validate: *mut rdline_validate_t,
    pub complete: *mut rdline_complete_t,
    pub vt100: Struct_cmdline_vt100,
    pub opaque: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_rdline {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rdline {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_hdr {
    pub ops: *mut Struct_cmdline_token_ops,
    pub offset: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_cmdline_token_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cmdline_parse_token_hdr_t = Struct_cmdline_token_hdr;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_ops {
    pub parse: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut cmdline_parse_token_hdr_t,
                                                          arg2:
                                                              *const ::std::os::raw::c_char,
                                                          arg3:
                                                              *mut ::std::os::raw::c_void,
                                                          arg4:
                                                              ::std::os::raw::c_uint)
                                         -> ::std::os::raw::c_int>,
    pub complete_get_nb: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut cmdline_parse_token_hdr_t)
                                                   -> ::std::os::raw::c_int>,
    pub complete_get_elt: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut cmdline_parse_token_hdr_t,
                                                                     arg2:
                                                                         ::std::os::raw::c_int,
                                                                     arg3:
                                                                         *mut ::std::os::raw::c_char,
                                                                     arg4:
                                                                         ::std::os::raw::c_uint)
                                                    -> ::std::os::raw::c_int>,
    pub get_help: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut cmdline_parse_token_hdr_t,
                                                             arg2:
                                                                 *mut ::std::os::raw::c_char,
                                                             arg3:
                                                                 ::std::os::raw::c_uint)
                                            -> ::std::os::raw::c_int>,
}
impl ::std::clone::Clone for Struct_cmdline_token_ops {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_ops {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_inst {
    pub f: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                          *mut ::std::os::raw::c_void,
                                                      arg2:
                                                          *mut Struct_cmdline,
                                                      arg3:
                                                          *mut ::std::os::raw::c_void)>,
    pub data: *mut ::std::os::raw::c_void,
    pub help_str: *const ::std::os::raw::c_char,
    pub tokens: *mut *mut cmdline_parse_token_hdr_t,
}
impl ::std::clone::Clone for Struct_cmdline_inst {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_inst {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cmdline_parse_inst_t = Struct_cmdline_inst;
pub type cmdline_parse_ctx_t = *mut cmdline_parse_inst_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_etheraddr {
    pub hdr: Struct_cmdline_token_hdr,
}
impl ::std::clone::Clone for Struct_cmdline_token_etheraddr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_etheraddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cmdline_parse_token_etheraddr_t = Struct_cmdline_token_etheraddr;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_ipaddr {
    pub family: uint8_t,
    pub addr: Union_Unnamed77,
    pub prefixlen: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_cmdline_ipaddr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_ipaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed77 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed77 {
    pub unsafe fn ipv4(&mut self) -> *mut Struct_in_addr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ipv6(&mut self) -> *mut Struct_in6_addr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed77 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed77 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cmdline_ipaddr_t = Struct_cmdline_ipaddr;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_ipaddr_data {
    pub flags: uint8_t,
}
impl ::std::clone::Clone for Struct_cmdline_token_ipaddr_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_ipaddr_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_ipaddr {
    pub hdr: Struct_cmdline_token_hdr,
    pub ipaddr_data: Struct_cmdline_token_ipaddr_data,
}
impl ::std::clone::Clone for Struct_cmdline_token_ipaddr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_ipaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cmdline_parse_token_ipaddr_t = Struct_cmdline_token_ipaddr;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_cmdline_numtype {
    UINT8 = 0,
    UINT16 = 1,
    UINT32 = 2,
    UINT64 = 3,
    INT8 = 4,
    INT16 = 5,
    INT32 = 6,
    INT64 = 7,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_num_data {
    pub _type: Enum_cmdline_numtype,
}
impl ::std::clone::Clone for Struct_cmdline_token_num_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_num_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_num {
    pub hdr: Struct_cmdline_token_hdr,
    pub num_data: Struct_cmdline_token_num_data,
}
impl ::std::clone::Clone for Struct_cmdline_token_num {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_num {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cmdline_parse_token_num_t = Struct_cmdline_token_num;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_portlist {
    pub map: uint32_t,
}
impl ::std::clone::Clone for Struct_cmdline_portlist {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_portlist {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cmdline_portlist_t = Struct_cmdline_portlist;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_portlist {
    pub hdr: Struct_cmdline_token_hdr,
}
impl ::std::clone::Clone for Struct_cmdline_token_portlist {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_portlist {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cmdline_parse_token_portlist_t = Struct_cmdline_token_portlist;
pub type cmdline_fixed_string_t = [::std::os::raw::c_char; 128usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_string_data {
    pub _str: *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_cmdline_token_string_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_string_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline_token_string {
    pub hdr: Struct_cmdline_token_hdr,
    pub string_data: Struct_cmdline_token_string_data,
}
impl ::std::clone::Clone for Struct_cmdline_token_string {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline_token_string {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cmdline_parse_token_string_t = Struct_cmdline_token_string;
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_uint;
pub type tcflag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
impl ::std::clone::Clone for Struct_termios {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_termios {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmdline {
    pub s_in: ::std::os::raw::c_int,
    pub s_out: ::std::os::raw::c_int,
    pub ctx: *mut cmdline_parse_ctx_t,
    pub rdl: Struct_rdline,
    pub prompt: [::std::os::raw::c_char; 32usize],
    pub oldterm: Struct_termios,
}
impl ::std::clone::Clone for Struct_cmdline {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmdline {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
    pub static mut rte_logs: Struct_rte_logs;
    pub static mut eal_default_log_stream: *mut FILE;
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut __daylight: ::std::os::raw::c_int;
    pub static mut __timezone: ::std::os::raw::c_long;
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut daylight: ::std::os::raw::c_int;
    pub static mut timezone: ::std::os::raw::c_long;
    pub static mut per_lcore__rte_errno: ::std::os::raw::c_void;
    pub static mut eal_timer_source: Enum_timer_source;
    pub static mut rte_cycles_vmware_tsc_map: ::std::os::raw::c_int;
    pub static mut lcore_config: [Struct_lcore_config; 128usize];
    pub static mut per_lcore__lcore_id: ::std::os::raw::c_void;
    pub static mut per_lcore__cpuset: ::std::os::raw::c_void;
    pub static mut pci_driver_list: Struct_pci_driver_list;
    pub static mut pci_device_list: Struct_pci_device_list;
    pub static mut devargs_list: Struct_rte_devargs_list;
    pub static mut rte_eth_devices: *mut Struct_rte_eth_dev;
    pub static in6addr_any: Struct_in6_addr;
    pub static in6addr_loopback: Struct_in6_addr;
    pub static mut cmdline_vt100_commands: *mut *const ::std::os::raw::c_char;
    pub static mut cmdline_token_etheraddr_ops: Struct_cmdline_token_ops;
    pub static mut cmdline_token_ipaddr_ops: Struct_cmdline_token_ops;
    pub static mut cmdline_token_num_ops: Struct_cmdline_token_ops;
    pub static mut cmdline_token_portlist_ops: Struct_cmdline_token_ops;
    pub static mut cmdline_token_string_ops: Struct_cmdline_token_ops;
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint,
                     __buf: *mut Struct_random_data) -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut Struct_random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut Struct_random_data)
     -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut Struct_drand48_data)
     -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut Struct_drand48_data)
     -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data)
     -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut ::std::os::raw::c_double,
                      __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
    pub fn rte_exit(exit_code: ::std::os::raw::c_int,
                    format: *const ::std::os::raw::c_char, ...);
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> size_t;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char) -> size_t;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char) -> size_t;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> size_t;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn gets(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn rte_openlog_stream(f: *mut FILE) -> ::std::os::raw::c_int;
    pub fn rte_set_log_level(level: uint32_t);
    pub fn rte_get_log_level() -> uint32_t;
    pub fn rte_set_log_type(_type: uint32_t, enable: ::std::os::raw::c_int);
    pub fn rte_get_log_type() -> uint32_t;
    pub fn rte_log_cur_msg_loglevel() -> ::std::os::raw::c_int;
    pub fn rte_log_cur_msg_logtype() -> ::std::os::raw::c_int;
    pub fn rte_log_set_history(enable: ::std::os::raw::c_int);
    pub fn rte_log_dump_history(f: *mut FILE);
    pub fn rte_log_add_in_history(buf: *const ::std::os::raw::c_char,
                                  size: size_t) -> ::std::os::raw::c_int;
    pub fn rte_log(level: uint32_t, logtype: uint32_t,
                   format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn rte_vlog(level: uint32_t, logtype: uint32_t,
                    format: *const ::std::os::raw::c_char, ap: va_list)
     -> ::std::os::raw::c_int;
    pub fn rte_mem_lock_page(virt: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_mem_virt2phy(virt: *const ::std::os::raw::c_void)
     -> phys_addr_t;
    pub fn rte_eal_get_physmem_layout() -> *const Struct_rte_memseg;
    pub fn rte_dump_physmem_layout(f: *mut FILE);
    pub fn rte_eal_get_physmem_size() -> uint64_t;
    pub fn rte_memory_get_nchannel() -> ::std::os::raw::c_uint;
    pub fn rte_memory_get_nrank() -> ::std::os::raw::c_uint;
    pub fn rte_malloc(_type: *const ::std::os::raw::c_char, size: size_t,
                      align: ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_void;
    pub fn rte_zmalloc(_type: *const ::std::os::raw::c_char, size: size_t,
                       align: ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_void;
    pub fn rte_calloc(_type: *const ::std::os::raw::c_char, num: size_t,
                      size: size_t, align: ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_void;
    pub fn rte_realloc(ptr: *mut ::std::os::raw::c_void, size: size_t,
                       align: ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_void;
    pub fn rte_malloc_socket(_type: *const ::std::os::raw::c_char,
                             size: size_t, align: ::std::os::raw::c_uint,
                             socket: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn rte_zmalloc_socket(_type: *const ::std::os::raw::c_char,
                              size: size_t, align: ::std::os::raw::c_uint,
                              socket: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn rte_calloc_socket(_type: *const ::std::os::raw::c_char,
                             num: size_t, size: size_t,
                             align: ::std::os::raw::c_uint,
                             socket: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn rte_free(ptr: *mut ::std::os::raw::c_void);
    pub fn rte_malloc_validate(ptr: *const ::std::os::raw::c_void,
                               size: *mut size_t) -> ::std::os::raw::c_int;
    pub fn rte_malloc_get_socket_stats(socket: ::std::os::raw::c_int,
                                       socket_stats:
                                           *mut Struct_rte_malloc_socket_stats)
     -> ::std::os::raw::c_int;
    pub fn rte_malloc_dump_stats(f: *mut FILE,
                                 _type: *const ::std::os::raw::c_char);
    pub fn rte_malloc_set_limit(_type: *const ::std::os::raw::c_char,
                                max: size_t) -> ::std::os::raw::c_int;
    pub fn rte_malloc_virt2phy(addr: *const ::std::os::raw::c_void)
     -> phys_addr_t;
    pub fn __sched_cpucount(__setsize: size_t, __setp: *const cpu_set_t)
     -> ::std::os::raw::c_int;
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
    pub fn sched_setparam(__pid: __pid_t, __param: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn sched_getparam(__pid: __pid_t, __param: *mut Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn sched_setscheduler(__pid: __pid_t, __policy: ::std::os::raw::c_int,
                              __param: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
    pub fn sched_yield() -> ::std::os::raw::c_int;
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t)
     -> ::std::os::raw::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: size_t,
                    __format: *const ::std::os::raw::c_char,
                    __tp: *const Struct_tm) -> size_t;
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: size_t,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const Struct_tm, __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::std::os::raw::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
    pub fn asctime_r(__tp: *const Struct_tm,
                     __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tzset();
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec)
     -> ::std::os::raw::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::std::os::raw::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn pthread_create(__newthread: *mut pthread_t,
                          __attr: *const pthread_attr_t,
                          __start_routine:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            *mut ::std::os::raw::c_void>,
                          __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
    pub fn pthread_join(__th: pthread_t,
                        __thread_return: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
    pub fn pthread_self() -> pthread_t;
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getdetachstate(__attr: *const pthread_attr_t,
                                       __detachstate:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setdetachstate(__attr: *mut pthread_attr_t,
                                       __detachstate: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getguardsize(__attr: *const pthread_attr_t,
                                     __guardsize: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setguardsize(__attr: *mut pthread_attr_t,
                                     __guardsize: size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getschedparam(__attr: *const pthread_attr_t,
                                      __param: *mut Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setschedparam(__attr: *mut pthread_attr_t,
                                      __param: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getschedpolicy(__attr: *const pthread_attr_t,
                                       __policy: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setschedpolicy(__attr: *mut pthread_attr_t,
                                       __policy: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getinheritsched(__attr: *const pthread_attr_t,
                                        __inherit: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setinheritsched(__attr: *mut pthread_attr_t,
                                        __inherit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getscope(__attr: *const pthread_attr_t,
                                 __scope: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t,
                                 __scope: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getstackaddr(__attr: *const pthread_attr_t,
                                     __stackaddr:
                                         *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setstackaddr(__attr: *mut pthread_attr_t,
                                     __stackaddr: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getstacksize(__attr: *const pthread_attr_t,
                                     __stacksize: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setstacksize(__attr: *mut pthread_attr_t,
                                     __stacksize: size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getstack(__attr: *const pthread_attr_t,
                                 __stackaddr:
                                     *mut *mut ::std::os::raw::c_void,
                                 __stacksize: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setstack(__attr: *mut pthread_attr_t,
                                 __stackaddr: *mut ::std::os::raw::c_void,
                                 __stacksize: size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_setschedparam(__target_thread: pthread_t,
                                 __policy: ::std::os::raw::c_int,
                                 __param: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_getschedparam(__target_thread: pthread_t,
                                 __policy: *mut ::std::os::raw::c_int,
                                 __param: *mut Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_setschedprio(__target_thread: pthread_t,
                                __prio: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_once(__once_control: *mut pthread_once_t,
                        __init_routine:
                            ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn pthread_setcancelstate(__state: ::std::os::raw::c_int,
                                  __oldstate: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_setcanceltype(__type: ::std::os::raw::c_int,
                                 __oldtype: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
    pub fn pthread_testcancel();
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
    pub fn __sigsetjmp(__env: *mut Struct___jmp_buf_tag,
                       __savemask: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_init(__mutex: *mut pthread_mutex_t,
                              __mutexattr: *const pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_timedlock(__mutex: *mut pthread_mutex_t,
                                   __abstime: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_getprioceiling(__mutex: *const pthread_mutex_t,
                                        __prioceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_setprioceiling(__mutex: *mut pthread_mutex_t,
                                        __prioceiling: ::std::os::raw::c_int,
                                        __old_ceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getpshared(__attr: *const pthread_mutexattr_t,
                                        __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setpshared(__attr: *mut pthread_mutexattr_t,
                                        __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_gettype(__attr: *const pthread_mutexattr_t,
                                     __kind: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_settype(__attr: *mut pthread_mutexattr_t,
                                     __kind: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getprotocol(__attr: *const pthread_mutexattr_t,
                                         __protocol:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setprotocol(__attr: *mut pthread_mutexattr_t,
                                         __protocol: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getprioceiling(__attr:
                                                *const pthread_mutexattr_t,
                                            __prioceiling:
                                                *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setprioceiling(__attr: *mut pthread_mutexattr_t,
                                            __prioceiling:
                                                ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getrobust(__attr: *const pthread_mutexattr_t,
                                       __robustness:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setrobust(__attr: *mut pthread_mutexattr_t,
                                       __robustness: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_init(__rwlock: *mut pthread_rwlock_t,
                               __attr: *const pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_timedrdlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_timedwrlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_getpshared(__attr: *const pthread_rwlockattr_t,
                                         __pshared:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_setpshared(__attr: *mut pthread_rwlockattr_t,
                                         __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_getkind_np(__attr: *const pthread_rwlockattr_t,
                                         __pref: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_setkind_np(__attr: *mut pthread_rwlockattr_t,
                                         __pref: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_init(__cond: *mut pthread_cond_t,
                             __cond_attr: *const pthread_condattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_wait(__cond: *mut pthread_cond_t,
                             __mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_timedwait(__cond: *mut pthread_cond_t,
                                  __mutex: *mut pthread_mutex_t,
                                  __abstime: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_getpshared(__attr: *const pthread_condattr_t,
                                       __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_setpshared(__attr: *mut pthread_condattr_t,
                                       __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_getclock(__attr: *const pthread_condattr_t,
                                     __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_setclock(__attr: *mut pthread_condattr_t,
                                     __clock_id: __clockid_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t,
                             __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrier_init(__barrier: *mut pthread_barrier_t,
                                __attr: *const pthread_barrierattr_t,
                                __count: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrierattr_getpshared(__attr:
                                              *const pthread_barrierattr_t,
                                          __pshared:
                                              *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrierattr_setpshared(__attr: *mut pthread_barrierattr_t,
                                          __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_key_create(__key: *mut pthread_key_t,
                              __destr_function:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
    pub fn pthread_getspecific(__key: pthread_key_t)
     -> *mut ::std::os::raw::c_void;
    pub fn pthread_setspecific(__key: pthread_key_t,
                               __pointer: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_getcpuclockid(__thread_id: pthread_t,
                                 __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_atfork(__prepare: ::std::option::Option<extern "C" fn()>,
                          __parent: ::std::option::Option<extern "C" fn()>,
                          __child: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn rte_strerror(errnum: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn rte_eal_remote_launch(f: *mut lcore_function_t,
                                 arg: *mut ::std::os::raw::c_void,
                                 slave_id: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_mp_remote_launch(f: *mut lcore_function_t,
                                    arg: *mut ::std::os::raw::c_void,
                                    call_master: Enum_rte_rmt_call_master_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_get_lcore_state(slave_id: ::std::os::raw::c_uint)
     -> Enum_rte_lcore_state_t;
    pub fn rte_eal_wait_lcore(slave_id: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_mp_wait_lcore();
    pub fn rte_dump_stack();
    pub fn rte_dump_registers();
    pub fn __rte_panic(funcname: *const ::std::os::raw::c_char,
                       format: *const ::std::os::raw::c_char, ...);
    pub fn rte_get_tsc_hz() -> uint64_t;
    pub fn rte_delay_us(us: ::std::os::raw::c_uint);
    pub fn rte_eal_get_configuration() -> *mut Struct_rte_config;
    pub fn rte_eal_lcore_role(lcore_id: ::std::os::raw::c_uint)
     -> Enum_rte_lcore_role_t;
    pub fn rte_eal_process_type() -> Enum_rte_proc_type_t;
    pub fn rte_eal_iopl_init() -> ::std::os::raw::c_int;
    pub fn rte_eal_init(argc: ::std::os::raw::c_int,
                        argv: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_primary_proc_alive(config_file_path:
                                          *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rte_set_application_usage_hook(usage_func: rte_usage_hook_t)
     -> rte_usage_hook_t;
    pub fn rte_eal_has_hugepages() -> ::std::os::raw::c_int;
    pub fn rte_sys_gettid() -> ::std::os::raw::c_int;
    pub fn rte_socket_id() -> ::std::os::raw::c_uint;
    pub fn rte_thread_set_affinity(cpusetp: *mut rte_cpuset_t)
     -> ::std::os::raw::c_int;
    pub fn rte_thread_get_affinity(cpusetp: *mut rte_cpuset_t);
    pub fn rte_cpu_get_flag_name(feature: Enum_rte_cpu_flag_t)
     -> *const ::std::os::raw::c_char;
    pub fn rte_cpu_get_flag_enabled(feature: Enum_rte_cpu_flag_t)
     -> ::std::os::raw::c_int;
    pub fn rte_cpu_check_supported();
    pub fn rte_ring_get_memsize(count: ::std::os::raw::c_uint) -> ssize_t;
    pub fn rte_ring_init(r: *mut Struct_rte_ring,
                         name: *const ::std::os::raw::c_char,
                         count: ::std::os::raw::c_uint,
                         flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn rte_ring_create(name: *const ::std::os::raw::c_char,
                           count: ::std::os::raw::c_uint,
                           socket_id: ::std::os::raw::c_int,
                           flags: ::std::os::raw::c_uint)
     -> *mut Struct_rte_ring;
    pub fn rte_ring_free(r: *mut Struct_rte_ring);
    pub fn rte_ring_set_water_mark(r: *mut Struct_rte_ring,
                                   count: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn rte_ring_dump(f: *mut FILE, r: *const Struct_rte_ring);
    pub fn rte_ring_list_dump(f: *mut FILE);
    pub fn rte_ring_lookup(name: *const ::std::os::raw::c_char)
     -> *mut Struct_rte_ring;
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> intmax_t;
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
    pub fn rte_mempool_obj_iter(vaddr: *mut ::std::os::raw::c_void,
                                elt_num: uint32_t, elt_sz: size_t,
                                align: size_t, paddr: *const phys_addr_t,
                                pg_num: uint32_t, pg_shift: uint32_t,
                                obj_iter: rte_mempool_obj_iter_t,
                                obj_iter_arg: *mut ::std::os::raw::c_void)
     -> uint32_t;
    pub fn rte_mempool_create(name: *const ::std::os::raw::c_char,
                              n: ::std::os::raw::c_uint,
                              elt_size: ::std::os::raw::c_uint,
                              cache_size: ::std::os::raw::c_uint,
                              private_data_size: ::std::os::raw::c_uint,
                              mp_init: *mut rte_mempool_ctor_t,
                              mp_init_arg: *mut ::std::os::raw::c_void,
                              obj_init: *mut rte_mempool_obj_ctor_t,
                              obj_init_arg: *mut ::std::os::raw::c_void,
                              socket_id: ::std::os::raw::c_int,
                              flags: ::std::os::raw::c_uint)
     -> *mut Struct_rte_mempool;
    pub fn rte_mempool_xmem_create(name: *const ::std::os::raw::c_char,
                                   n: ::std::os::raw::c_uint,
                                   elt_size: ::std::os::raw::c_uint,
                                   cache_size: ::std::os::raw::c_uint,
                                   private_data_size: ::std::os::raw::c_uint,
                                   mp_init: *mut rte_mempool_ctor_t,
                                   mp_init_arg: *mut ::std::os::raw::c_void,
                                   obj_init: *mut rte_mempool_obj_ctor_t,
                                   obj_init_arg: *mut ::std::os::raw::c_void,
                                   socket_id: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint,
                                   vaddr: *mut ::std::os::raw::c_void,
                                   paddr: *const phys_addr_t,
                                   pg_num: uint32_t, pg_shift: uint32_t)
     -> *mut Struct_rte_mempool;
    pub fn rte_dom0_mempool_create(name: *const ::std::os::raw::c_char,
                                   n: ::std::os::raw::c_uint,
                                   elt_size: ::std::os::raw::c_uint,
                                   cache_size: ::std::os::raw::c_uint,
                                   private_data_size: ::std::os::raw::c_uint,
                                   mp_init: *mut rte_mempool_ctor_t,
                                   mp_init_arg: *mut ::std::os::raw::c_void,
                                   obj_init: *mut rte_mempool_obj_ctor_t,
                                   obj_init_arg: *mut ::std::os::raw::c_void,
                                   socket_id: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
     -> *mut Struct_rte_mempool;
    pub fn rte_mempool_dump(f: *mut FILE, mp: *const Struct_rte_mempool);
    pub fn rte_mempool_count(mp: *const Struct_rte_mempool)
     -> ::std::os::raw::c_uint;
    pub fn rte_mempool_audit(mp: *const Struct_rte_mempool);
    pub fn rte_mempool_list_dump(f: *mut FILE);
    pub fn rte_mempool_lookup(name: *const ::std::os::raw::c_char)
     -> *mut Struct_rte_mempool;
    pub fn rte_mempool_calc_obj_size(elt_size: uint32_t, flags: uint32_t,
                                     sz: *mut Struct_rte_mempool_objsz)
     -> uint32_t;
    pub fn rte_mempool_xmem_size(elt_num: uint32_t, elt_sz: size_t,
                                 pg_shift: uint32_t) -> size_t;
    pub fn rte_mempool_xmem_usage(vaddr: *mut ::std::os::raw::c_void,
                                  elt_num: uint32_t, elt_sz: size_t,
                                  paddr: *const phys_addr_t, pg_num: uint32_t,
                                  pg_shift: uint32_t) -> ssize_t;
    pub fn rte_mempool_walk(func:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *const Struct_rte_mempool,
                                                                           arg:
                                                                               *mut ::std::os::raw::c_void)>,
                            arg: *mut ::std::os::raw::c_void);
    pub fn rte_get_rx_ol_flag_name(mask: uint64_t)
     -> *const ::std::os::raw::c_char;
    pub fn rte_get_tx_ol_flag_name(mask: uint64_t)
     -> *const ::std::os::raw::c_char;
    pub fn rte_mbuf_sanity_check(m: *const Struct_rte_mbuf,
                                 is_header: ::std::os::raw::c_int);
    pub fn rte_ctrlmbuf_init(mp: *mut Struct_rte_mempool,
                             opaque_arg: *mut ::std::os::raw::c_void,
                             m: *mut ::std::os::raw::c_void,
                             i: ::std::os::raw::c_uint);
    pub fn rte_pktmbuf_init(mp: *mut Struct_rte_mempool,
                            opaque_arg: *mut ::std::os::raw::c_void,
                            m: *mut ::std::os::raw::c_void,
                            i: ::std::os::raw::c_uint);
    pub fn rte_pktmbuf_pool_init(mp: *mut Struct_rte_mempool,
                                 opaque_arg: *mut ::std::os::raw::c_void);
    pub fn rte_pktmbuf_pool_create(name: *const ::std::os::raw::c_char,
                                   n: ::std::os::raw::c_uint,
                                   cache_size: ::std::os::raw::c_uint,
                                   priv_size: uint16_t,
                                   data_room_size: uint16_t,
                                   socket_id: ::std::os::raw::c_int)
     -> *mut Struct_rte_mempool;
    pub fn rte_pktmbuf_dump(f: *mut FILE, m: *const Struct_rte_mbuf,
                            dump_len: ::std::os::raw::c_uint);
    pub fn rte_timer_subsystem_init();
    pub fn rte_timer_init(tim: *mut Struct_rte_timer);
    pub fn rte_timer_reset(tim: *mut Struct_rte_timer, ticks: uint64_t,
                           _type: Enum_rte_timer_type,
                           tim_lcore: ::std::os::raw::c_uint,
                           fct: rte_timer_cb_t,
                           arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_timer_reset_sync(tim: *mut Struct_rte_timer, ticks: uint64_t,
                                _type: Enum_rte_timer_type,
                                tim_lcore: ::std::os::raw::c_uint,
                                fct: rte_timer_cb_t,
                                arg: *mut ::std::os::raw::c_void);
    pub fn rte_timer_stop(tim: *mut Struct_rte_timer)
     -> ::std::os::raw::c_int;
    pub fn rte_timer_stop_sync(tim: *mut Struct_rte_timer);
    pub fn rte_timer_pending(tim: *mut Struct_rte_timer)
     -> ::std::os::raw::c_int;
    pub fn rte_timer_manage();
    pub fn rte_timer_dump_stats(f: *mut FILE);
    pub fn rte_dump_tailq(f: *mut FILE);
    pub fn rte_eal_tailq_lookup(name: *const ::std::os::raw::c_char)
     -> *mut Struct_rte_tailq_head;
    pub fn rte_eal_tailq_register(t: *mut Struct_rte_tailq_elem)
     -> ::std::os::raw::c_int;
    pub fn rte_memzone_reserve(name: *const ::std::os::raw::c_char,
                               len: size_t, socket_id: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint)
     -> *const Struct_rte_memzone;
    pub fn rte_memzone_reserve_aligned(name: *const ::std::os::raw::c_char,
                                       len: size_t,
                                       socket_id: ::std::os::raw::c_int,
                                       flags: ::std::os::raw::c_uint,
                                       align: ::std::os::raw::c_uint)
     -> *const Struct_rte_memzone;
    pub fn rte_memzone_reserve_bounded(name: *const ::std::os::raw::c_char,
                                       len: size_t,
                                       socket_id: ::std::os::raw::c_int,
                                       flags: ::std::os::raw::c_uint,
                                       align: ::std::os::raw::c_uint,
                                       bound: ::std::os::raw::c_uint)
     -> *const Struct_rte_memzone;
    pub fn rte_memzone_free(mz: *const Struct_rte_memzone)
     -> ::std::os::raw::c_int;
    pub fn rte_memzone_lookup(name: *const ::std::os::raw::c_char)
     -> *const Struct_rte_memzone;
    pub fn rte_memzone_dump(f: *mut FILE);
    pub fn rte_memzone_walk(func:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *const Struct_rte_memzone,
                                                                           arg:
                                                                               *mut ::std::os::raw::c_void)>,
                            arg: *mut ::std::os::raw::c_void);
    pub fn rte_epoll_wait(epfd: ::std::os::raw::c_int,
                          events: *mut Struct_rte_epoll_event,
                          maxevents: ::std::os::raw::c_int,
                          timeout: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rte_epoll_ctl(epfd: ::std::os::raw::c_int,
                         op: ::std::os::raw::c_int, fd: ::std::os::raw::c_int,
                         event: *mut Struct_rte_epoll_event)
     -> ::std::os::raw::c_int;
    pub fn rte_intr_tls_epfd() -> ::std::os::raw::c_int;
    pub fn rte_intr_rx_ctl(intr_handle: *mut Struct_rte_intr_handle,
                           epfd: ::std::os::raw::c_int,
                           op: ::std::os::raw::c_int,
                           vec: ::std::os::raw::c_uint,
                           data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_intr_efd_enable(intr_handle: *mut Struct_rte_intr_handle,
                               nb_efd: uint32_t) -> ::std::os::raw::c_int;
    pub fn rte_intr_efd_disable(intr_handle: *mut Struct_rte_intr_handle);
    pub fn rte_intr_dp_is_en(intr_handle: *mut Struct_rte_intr_handle)
     -> ::std::os::raw::c_int;
    pub fn rte_intr_allow_others(intr_handle: *mut Struct_rte_intr_handle)
     -> ::std::os::raw::c_int;
    pub fn rte_intr_cap_multiple(intr_handle: *mut Struct_rte_intr_handle)
     -> ::std::os::raw::c_int;
    pub fn rte_intr_callback_register(intr_handle:
                                          *mut Struct_rte_intr_handle,
                                      cb: rte_intr_callback_fn,
                                      cb_arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_intr_callback_unregister(intr_handle:
                                            *mut Struct_rte_intr_handle,
                                        cb: rte_intr_callback_fn,
                                        cb_arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_intr_enable(intr_handle: *mut Struct_rte_intr_handle)
     -> ::std::os::raw::c_int;
    pub fn rte_intr_disable(intr_handle: *mut Struct_rte_intr_handle)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_scan() -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_probe() -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_map_device(dev: *mut Struct_rte_pci_device)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_unmap_device(dev: *mut Struct_rte_pci_device);
    pub fn pci_map_resource(requested_addr: *mut ::std::os::raw::c_void,
                            fd: ::std::os::raw::c_int, offset: off_t,
                            size: size_t,
                            additional_flags: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn pci_unmap_resource(requested_addr: *mut ::std::os::raw::c_void,
                              size: size_t);
    pub fn rte_eal_pci_probe_one(addr: *const Struct_rte_pci_addr)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_detach(addr: *const Struct_rte_pci_addr)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_dump(f: *mut FILE);
    pub fn rte_eal_pci_register(driver: *mut Struct_rte_pci_driver);
    pub fn rte_eal_pci_unregister(driver: *mut Struct_rte_pci_driver);
    pub fn rte_eal_pci_read_config(device: *const Struct_rte_pci_device,
                                   buf: *mut ::std::os::raw::c_void,
                                   len: size_t, offset: off_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_write_config(device: *const Struct_rte_pci_device,
                                    buf: *const ::std::os::raw::c_void,
                                    len: size_t, offset: off_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_ioport_map(dev: *mut Struct_rte_pci_device,
                                  bar: ::std::os::raw::c_int,
                                  p: *mut Struct_rte_pci_ioport)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_ioport_unmap(p: *mut Struct_rte_pci_ioport)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_pci_ioport_read(p: *mut Struct_rte_pci_ioport,
                                   data: *mut ::std::os::raw::c_void,
                                   len: size_t, offset: off_t);
    pub fn rte_eal_pci_ioport_write(p: *mut Struct_rte_pci_ioport,
                                    data: *const ::std::os::raw::c_void,
                                    len: size_t, offset: off_t);
    pub fn rte_eal_driver_register(driver: *mut Struct_rte_driver);
    pub fn rte_eal_driver_unregister(driver: *mut Struct_rte_driver);
    pub fn rte_eal_dev_init() -> ::std::os::raw::c_int;
    pub fn rte_eal_vdev_init(name: *const ::std::os::raw::c_char,
                             args: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_vdev_uninit(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_parse_devargs_str(devargs_str:
                                         *const ::std::os::raw::c_char,
                                     drvname:
                                         *mut *mut ::std::os::raw::c_char,
                                     drvargs:
                                         *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_devargs_add(devtype: Enum_rte_devtype,
                               devargs_str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rte_eal_devargs_type_count(devtype: Enum_rte_devtype)
     -> ::std::os::raw::c_uint;
    pub fn rte_eal_devargs_dump(f: *mut FILE);
    pub fn rte_eth_dev_count() -> uint8_t;
    pub fn rte_eth_dev_allocated(name: *const ::std::os::raw::c_char)
     -> *mut Struct_rte_eth_dev;
    pub fn rte_eth_dev_allocate(name: *const ::std::os::raw::c_char,
                                _type: Enum_rte_eth_dev_type)
     -> *mut Struct_rte_eth_dev;
    pub fn rte_eth_dev_release_port(eth_dev: *mut Struct_rte_eth_dev)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_attach(devargs: *const ::std::os::raw::c_char,
                              port_id: *mut uint8_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_detach(port_id: uint8_t,
                              devname: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_driver_register(eth_drv: *mut Struct_eth_driver);
    pub fn rte_eth_speed_bitflag(speed: uint32_t,
                                 duplex: ::std::os::raw::c_int) -> uint32_t;
    pub fn rte_eth_dev_configure(port_id: uint8_t, nb_rx_queue: uint16_t,
                                 nb_tx_queue: uint16_t,
                                 eth_conf: *const Struct_rte_eth_conf)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_rx_queue_setup(port_id: uint8_t, rx_queue_id: uint16_t,
                                  nb_rx_desc: uint16_t,
                                  socket_id: ::std::os::raw::c_uint,
                                  rx_conf: *const Struct_rte_eth_rxconf,
                                  mb_pool: *mut Struct_rte_mempool)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_tx_queue_setup(port_id: uint8_t, tx_queue_id: uint16_t,
                                  nb_tx_desc: uint16_t,
                                  socket_id: ::std::os::raw::c_uint,
                                  tx_conf: *const Struct_rte_eth_txconf)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_socket_id(port_id: uint8_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_is_valid_port(port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_rx_queue_start(port_id: uint8_t, rx_queue_id: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_rx_queue_stop(port_id: uint8_t, rx_queue_id: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_tx_queue_start(port_id: uint8_t, tx_queue_id: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_tx_queue_stop(port_id: uint8_t, tx_queue_id: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_start(port_id: uint8_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_stop(port_id: uint8_t);
    pub fn rte_eth_dev_set_link_up(port_id: uint8_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_link_down(port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_close(port_id: uint8_t);
    pub fn rte_eth_promiscuous_enable(port_id: uint8_t);
    pub fn rte_eth_promiscuous_disable(port_id: uint8_t);
    pub fn rte_eth_promiscuous_get(port_id: uint8_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_allmulticast_enable(port_id: uint8_t);
    pub fn rte_eth_allmulticast_disable(port_id: uint8_t);
    pub fn rte_eth_allmulticast_get(port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_link_get(port_id: uint8_t, link: *mut Struct_rte_eth_link);
    pub fn rte_eth_link_get_nowait(port_id: uint8_t,
                                   link: *mut Struct_rte_eth_link);
    pub fn rte_eth_stats_get(port_id: uint8_t,
                             stats: *mut Struct_rte_eth_stats)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_stats_reset(port_id: uint8_t);
    pub fn rte_eth_xstats_get(port_id: uint8_t,
                              xstats: *mut Struct_rte_eth_xstats,
                              n: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_xstats_reset(port_id: uint8_t);
    pub fn rte_eth_dev_set_tx_queue_stats_mapping(port_id: uint8_t,
                                                  tx_queue_id: uint16_t,
                                                  stat_idx: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_rx_queue_stats_mapping(port_id: uint8_t,
                                                  rx_queue_id: uint16_t,
                                                  stat_idx: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_macaddr_get(port_id: uint8_t,
                               mac_addr: *mut Struct_ether_addr);
    pub fn rte_eth_dev_info_get(port_id: uint8_t,
                                dev_info: *mut Struct_rte_eth_dev_info);
    pub fn rte_eth_dev_get_supported_ptypes(port_id: uint8_t,
                                            ptype_mask: uint32_t,
                                            ptypes: *mut uint32_t,
                                            num: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_get_mtu(port_id: uint8_t, mtu: *mut uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_mtu(port_id: uint8_t, mtu: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_vlan_filter(port_id: uint8_t, vlan_id: uint16_t,
                                   on: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_vlan_strip_on_queue(port_id: uint8_t,
                                               rx_queue_id: uint16_t,
                                               on: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_vlan_ether_type(port_id: uint8_t,
                                           vlan_type: Enum_rte_vlan_type,
                                           tag_type: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_vlan_offload(port_id: uint8_t,
                                        offload_mask: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_get_vlan_offload(port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_vlan_pvid(port_id: uint8_t, pvid: uint16_t,
                                     on: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_tx_buffer_init(buffer: *mut Struct_rte_eth_dev_tx_buffer,
                                  size: uint16_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_tx_buffer_set_err_callback(buffer:
                                                  *mut Struct_rte_eth_dev_tx_buffer,
                                              callback: buffer_tx_error_fn,
                                              userdata:
                                                  *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_tx_buffer_drop_callback(pkts: *mut *mut Struct_rte_mbuf,
                                           unsent: uint16_t,
                                           userdata:
                                               *mut ::std::os::raw::c_void);
    pub fn rte_eth_tx_buffer_count_callback(pkts: *mut *mut Struct_rte_mbuf,
                                            unsent: uint16_t,
                                            userdata:
                                                *mut ::std::os::raw::c_void);
    pub fn rte_eth_dev_callback_register(port_id: uint8_t,
                                         event: Enum_rte_eth_event_type,
                                         cb_fn: rte_eth_dev_cb_fn,
                                         cb_arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_callback_unregister(port_id: uint8_t,
                                           event: Enum_rte_eth_event_type,
                                           cb_fn: rte_eth_dev_cb_fn,
                                           cb_arg:
                                               *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn _rte_eth_dev_callback_process(dev: *mut Struct_rte_eth_dev,
                                         event: Enum_rte_eth_event_type);
    pub fn rte_eth_dev_rx_intr_enable(port_id: uint8_t, queue_id: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_rx_intr_disable(port_id: uint8_t, queue_id: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_rx_intr_ctl(port_id: uint8_t,
                                   epfd: ::std::os::raw::c_int,
                                   op: ::std::os::raw::c_int,
                                   data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_rx_intr_ctl_q(port_id: uint8_t, queue_id: uint16_t,
                                     epfd: ::std::os::raw::c_int,
                                     op: ::std::os::raw::c_int,
                                     data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_led_on(port_id: uint8_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_led_off(port_id: uint8_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_flow_ctrl_get(port_id: uint8_t,
                                     fc_conf: *mut Struct_rte_eth_fc_conf)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_flow_ctrl_set(port_id: uint8_t,
                                     fc_conf: *mut Struct_rte_eth_fc_conf)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_priority_flow_ctrl_set(port_id: uint8_t,
                                              pfc_conf:
                                                  *mut Struct_rte_eth_pfc_conf)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_mac_addr_add(port: uint8_t,
                                    mac_addr: *mut Struct_ether_addr,
                                    pool: uint32_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_mac_addr_remove(port: uint8_t,
                                       mac_addr: *mut Struct_ether_addr)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_default_mac_addr_set(port: uint8_t,
                                            mac_addr: *mut Struct_ether_addr)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_rss_reta_update(port: uint8_t,
                                       reta_conf:
                                           *mut Struct_rte_eth_rss_reta_entry64,
                                       reta_size: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_rss_reta_query(port: uint8_t,
                                      reta_conf:
                                          *mut Struct_rte_eth_rss_reta_entry64,
                                      reta_size: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_uc_hash_table_set(port: uint8_t,
                                         addr: *mut Struct_ether_addr,
                                         on: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_uc_all_hash_table_set(port: uint8_t, on: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_vf_rxmode(port: uint8_t, vf: uint16_t,
                                     rx_mode: uint16_t, on: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_vf_tx(port: uint8_t, vf: uint16_t, on: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_vf_rx(port: uint8_t, vf: uint16_t, on: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_vf_vlan_filter(port: uint8_t, vlan_id: uint16_t,
                                          vf_mask: uint64_t, vlan_on: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_mirror_rule_set(port_id: uint8_t,
                                   mirror_conf:
                                       *mut Struct_rte_eth_mirror_conf,
                                   rule_id: uint8_t, on: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_mirror_rule_reset(port_id: uint8_t, rule_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_set_queue_rate_limit(port_id: uint8_t, queue_idx: uint16_t,
                                        tx_rate: uint16_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_set_vf_rate_limit(port_id: uint8_t, vf: uint16_t,
                                     tx_rate: uint16_t, q_msk: uint64_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_bypass_init(port: uint8_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_bypass_state_show(port: uint8_t, state: *mut uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_bypass_state_set(port: uint8_t,
                                        new_state: *mut uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_bypass_event_show(port: uint8_t, event: uint32_t,
                                         state: *mut uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_bypass_event_store(port: uint8_t, event: uint32_t,
                                          state: uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_wd_timeout_store(port: uint8_t, timeout: uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_bypass_ver_show(port: uint8_t, ver: *mut uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_bypass_wd_timeout_show(port: uint8_t,
                                              wd_timeout: *mut uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_bypass_wd_reset(port: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_rss_hash_update(port_id: uint8_t,
                                       rss_conf: *mut Struct_rte_eth_rss_conf)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_rss_hash_conf_get(port_id: uint8_t,
                                         rss_conf:
                                             *mut Struct_rte_eth_rss_conf)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_udp_tunnel_port_add(port_id: uint8_t,
                                           tunnel_udp:
                                               *mut Struct_rte_eth_udp_tunnel)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_udp_tunnel_port_delete(port_id: uint8_t,
                                              tunnel_udp:
                                                  *mut Struct_rte_eth_udp_tunnel)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_filter_supported(port_id: uint8_t,
                                        filter_type: Enum_rte_filter_type)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_filter_ctrl(port_id: uint8_t,
                                   filter_type: Enum_rte_filter_type,
                                   filter_op: Enum_rte_filter_op,
                                   arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_get_dcb_info(port_id: uint8_t,
                                    dcb_info: *mut Struct_rte_eth_dcb_info)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_add_rx_callback(port_id: uint8_t, queue_id: uint16_t,
                                   _fn: rte_rx_callback_fn,
                                   user_param: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn rte_eth_add_tx_callback(port_id: uint8_t, queue_id: uint16_t,
                                   _fn: rte_tx_callback_fn,
                                   user_param: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn rte_eth_remove_rx_callback(port_id: uint8_t, queue_id: uint16_t,
                                      user_cb:
                                          *mut Struct_rte_eth_rxtx_callback)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_remove_tx_callback(port_id: uint8_t, queue_id: uint16_t,
                                      user_cb:
                                          *mut Struct_rte_eth_rxtx_callback)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_rx_queue_info_get(port_id: uint8_t, queue_id: uint16_t,
                                     qinfo: *mut Struct_rte_eth_rxq_info)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_tx_queue_info_get(port_id: uint8_t, queue_id: uint16_t,
                                     qinfo: *mut Struct_rte_eth_txq_info)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_get_reg_length(port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_get_reg_info(port_id: uint8_t,
                                    info: *mut Struct_rte_dev_reg_info)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_get_eeprom_length(port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_get_eeprom(port_id: uint8_t,
                                  info: *mut Struct_rte_dev_eeprom_info)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_eeprom(port_id: uint8_t,
                                  info: *mut Struct_rte_dev_eeprom_info)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_set_mc_addr_list(port_id: uint8_t,
                                        mc_addr_set: *mut Struct_ether_addr,
                                        nb_mc_addr: uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_timesync_enable(port_id: uint8_t) -> ::std::os::raw::c_int;
    pub fn rte_eth_timesync_disable(port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_timesync_read_rx_timestamp(port_id: uint8_t,
                                              timestamp: *mut Struct_timespec,
                                              flags: uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_timesync_read_tx_timestamp(port_id: uint8_t,
                                              timestamp: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_timesync_adjust_time(port_id: uint8_t, delta: int64_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_timesync_read_time(port_id: uint8_t,
                                      time: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_timesync_write_time(port_id: uint8_t,
                                       time: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_copy_pci_info(eth_dev: *mut Struct_rte_eth_dev,
                                 pci_dev: *mut Struct_rte_pci_device);
    pub fn rte_eth_dma_zone_reserve(eth_dev: *const Struct_rte_eth_dev,
                                    name: *const ::std::os::raw::c_char,
                                    queue_id: uint16_t, size: size_t,
                                    align: ::std::os::raw::c_uint,
                                    socket_id: ::std::os::raw::c_int)
     -> *const Struct_rte_memzone;
    pub fn rte_eth_dev_l2_tunnel_eth_type_conf(port_id: uint8_t,
                                               l2_tunnel:
                                                   *mut Struct_rte_eth_l2_tunnel_conf)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_dev_l2_tunnel_offload_set(port_id: uint8_t,
                                             l2_tunnel:
                                                 *mut Struct_rte_eth_l2_tunnel_conf,
                                             mask: uint32_t, en: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_kni_init(max_kni_ifaces: ::std::os::raw::c_uint);
    pub fn rte_kni_alloc(pktmbuf_pool: *mut Struct_rte_mempool,
                         conf: *const Struct_rte_kni_conf,
                         ops: *mut Struct_rte_kni_ops) -> *mut Struct_rte_kni;
    pub fn rte_kni_release(kni: *mut Struct_rte_kni) -> ::std::os::raw::c_int;
    pub fn rte_kni_handle_request(kni: *mut Struct_rte_kni)
     -> ::std::os::raw::c_int;
    pub fn rte_kni_rx_burst(kni: *mut Struct_rte_kni,
                            mbufs: *mut *mut Struct_rte_mbuf,
                            num: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn rte_kni_tx_burst(kni: *mut Struct_rte_kni,
                            mbufs: *mut *mut Struct_rte_mbuf,
                            num: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn rte_kni_get(name: *const ::std::os::raw::c_char)
     -> *mut Struct_rte_kni;
    pub fn rte_kni_get_name(kni: *const Struct_rte_kni)
     -> *const ::std::os::raw::c_char;
    pub fn rte_kni_register_handlers(kni: *mut Struct_rte_kni,
                                     ops: *mut Struct_rte_kni_ops)
     -> ::std::os::raw::c_int;
    pub fn rte_kni_unregister_handlers(kni: *mut Struct_rte_kni)
     -> ::std::os::raw::c_int;
    pub fn rte_kni_close();
    pub fn rte_eth_bond_create(name: *const ::std::os::raw::c_char,
                               mode: uint8_t, socket_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_free(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_slave_add(bonded_port_id: uint8_t,
                                  slave_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_slave_remove(bonded_port_id: uint8_t,
                                     slave_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_mode_set(bonded_port_id: uint8_t, mode: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_mode_get(bonded_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_primary_set(bonded_port_id: uint8_t,
                                    slave_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_primary_get(bonded_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_slaves_get(bonded_port_id: uint8_t,
                                   slaves: *mut uint8_t, len: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_active_slaves_get(bonded_port_id: uint8_t,
                                          slaves: *mut uint8_t, len: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_mac_address_set(bonded_port_id: uint8_t,
                                        mac_addr: *mut Struct_ether_addr)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_mac_address_reset(bonded_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_xmit_policy_set(bonded_port_id: uint8_t,
                                        policy: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_xmit_policy_get(bonded_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_link_monitoring_set(bonded_port_id: uint8_t,
                                            internal_ms: uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_link_monitoring_get(bonded_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_link_down_prop_delay_set(bonded_port_id: uint8_t,
                                                 delay_ms: uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_link_down_prop_delay_get(bonded_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_link_up_prop_delay_set(bonded_port_id: uint8_t,
                                               delay_ms: uint32_t)
     -> ::std::os::raw::c_int;
    pub fn rte_eth_bond_link_up_prop_delay_get(bonded_port_id: uint8_t)
     -> ::std::os::raw::c_int;
    pub fn readv(__fd: ::std::os::raw::c_int, __iovec: *const Struct_iovec,
                 __count: ::std::os::raw::c_int) -> ssize_t;
    pub fn writev(__fd: ::std::os::raw::c_int, __iovec: *const Struct_iovec,
                  __count: ::std::os::raw::c_int) -> ssize_t;
    pub fn preadv(__fd: ::std::os::raw::c_int, __iovec: *const Struct_iovec,
                  __count: ::std::os::raw::c_int, __offset: __off_t)
     -> ssize_t;
    pub fn pwritev(__fd: ::std::os::raw::c_int, __iovec: *const Struct_iovec,
                   __count: ::std::os::raw::c_int, __offset: __off_t)
     -> ssize_t;
    pub fn __cmsg_nxthdr(__mhdr: *mut Struct_msghdr,
                         __cmsg: *mut Struct_cmsghdr) -> *mut Struct_cmsghdr;
    pub fn socket(__domain: ::std::os::raw::c_int,
                  __type: ::std::os::raw::c_int,
                  __protocol: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn socketpair(__domain: ::std::os::raw::c_int,
                      __type: ::std::os::raw::c_int,
                      __protocol: ::std::os::raw::c_int,
                      __fds: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn bind(__fd: ::std::os::raw::c_int, __addr: *const Struct_sockaddr,
                __len: socklen_t) -> ::std::os::raw::c_int;
    pub fn getsockname(__fd: ::std::os::raw::c_int,
                       __addr: *mut Struct_sockaddr, __len: *mut socklen_t)
     -> ::std::os::raw::c_int;
    pub fn connect(__fd: ::std::os::raw::c_int,
                   __addr: *const Struct_sockaddr, __len: socklen_t)
     -> ::std::os::raw::c_int;
    pub fn getpeername(__fd: ::std::os::raw::c_int,
                       __addr: *mut Struct_sockaddr, __len: *mut socklen_t)
     -> ::std::os::raw::c_int;
    pub fn send(__fd: ::std::os::raw::c_int,
                __buf: *const ::std::os::raw::c_void, __n: size_t,
                __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn recv(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __n: size_t,
                __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn sendto(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: size_t,
                  __flags: ::std::os::raw::c_int,
                  __addr: *const Struct_sockaddr, __addr_len: socklen_t)
     -> ssize_t;
    pub fn recvfrom(__fd: ::std::os::raw::c_int,
                    __buf: *mut ::std::os::raw::c_void, __n: size_t,
                    __flags: ::std::os::raw::c_int,
                    __addr: *mut Struct_sockaddr, __addr_len: *mut socklen_t)
     -> ssize_t;
    pub fn sendmsg(__fd: ::std::os::raw::c_int,
                   __message: *const Struct_msghdr,
                   __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn recvmsg(__fd: ::std::os::raw::c_int, __message: *mut Struct_msghdr,
                   __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn getsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *mut ::std::os::raw::c_void,
                      __optlen: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn setsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *const ::std::os::raw::c_void,
                      __optlen: socklen_t) -> ::std::os::raw::c_int;
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn accept(__fd: ::std::os::raw::c_int, __addr: *mut Struct_sockaddr,
                  __addr_len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn shutdown(__fd: ::std::os::raw::c_int, __how: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isfdtype(__fd: ::std::os::raw::c_int,
                    __fdtype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ntohl(__netlong: uint32_t) -> uint32_t;
    pub fn ntohs(__netshort: uint16_t) -> uint16_t;
    pub fn htonl(__hostlong: uint32_t) -> uint32_t;
    pub fn htons(__hostshort: uint16_t) -> uint16_t;
    pub fn bindresvport(__sockfd: ::std::os::raw::c_int,
                        __sock_in: *mut Struct_sockaddr_in)
     -> ::std::os::raw::c_int;
    pub fn bindresvport6(__sockfd: ::std::os::raw::c_int,
                         __sock_in: *mut Struct_sockaddr_in6)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_init(cbuf: *mut Struct_cirbuf,
                       buf: *mut ::std::os::raw::c_char,
                       start: ::std::os::raw::c_uint,
                       maxlen: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_add_head_safe(cbuf: *mut Struct_cirbuf,
                                c: ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_add_head(cbuf: *mut Struct_cirbuf,
                           c: ::std::os::raw::c_char);
    pub fn cirbuf_add_tail_safe(cbuf: *mut Struct_cirbuf,
                                c: ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_add_tail(cbuf: *mut Struct_cirbuf,
                           c: ::std::os::raw::c_char);
    pub fn cirbuf_del_head_safe(cbuf: *mut Struct_cirbuf)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_del_head(cbuf: *mut Struct_cirbuf);
    pub fn cirbuf_del_tail_safe(cbuf: *mut Struct_cirbuf)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_del_tail(cbuf: *mut Struct_cirbuf);
    pub fn cirbuf_get_head(cbuf: *mut Struct_cirbuf)
     -> ::std::os::raw::c_char;
    pub fn cirbuf_get_tail(cbuf: *mut Struct_cirbuf)
     -> ::std::os::raw::c_char;
    pub fn cirbuf_add_buf_head(cbuf: *mut Struct_cirbuf,
                               c: *const ::std::os::raw::c_char,
                               n: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_add_buf_tail(cbuf: *mut Struct_cirbuf,
                               c: *const ::std::os::raw::c_char,
                               n: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_del_buf_head(cbuf: *mut Struct_cirbuf,
                               size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_del_buf_tail(cbuf: *mut Struct_cirbuf,
                               size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_get_buf_head(cbuf: *mut Struct_cirbuf,
                               c: *mut ::std::os::raw::c_char,
                               size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_get_buf_tail(cbuf: *mut Struct_cirbuf,
                               c: *mut ::std::os::raw::c_char,
                               size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_align_left(cbuf: *mut Struct_cirbuf)
     -> ::std::os::raw::c_int;
    pub fn cirbuf_align_right(cbuf: *mut Struct_cirbuf)
     -> ::std::os::raw::c_int;
    pub fn vt100_init(vt: *mut Struct_cmdline_vt100);
    pub fn vt100_parser(vt: *mut Struct_cmdline_vt100,
                        c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn rdline_init(rdl: *mut Struct_rdline,
                       write_char: *mut rdline_write_char_t,
                       validate: *mut rdline_validate_t,
                       complete: *mut rdline_complete_t)
     -> ::std::os::raw::c_int;
    pub fn rdline_newline(rdl: *mut Struct_rdline,
                          prompt: *const ::std::os::raw::c_char);
    pub fn rdline_stop(rdl: *mut Struct_rdline);
    pub fn rdline_quit(rdl: *mut Struct_rdline);
    pub fn rdline_restart(rdl: *mut Struct_rdline);
    pub fn rdline_redisplay(rdl: *mut Struct_rdline);
    pub fn rdline_reset(rdl: *mut Struct_rdline);
    pub fn rdline_char_in(rdl: *mut Struct_rdline, c: ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rdline_get_buffer(rdl: *mut Struct_rdline)
     -> *const ::std::os::raw::c_char;
    pub fn rdline_add_history(rdl: *mut Struct_rdline,
                              buf: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rdline_clear_history(rdl: *mut Struct_rdline);
    pub fn rdline_get_history_item(rdl: *mut Struct_rdline,
                                   i: ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_char;
    pub fn cmdline_parse(cl: *mut Struct_cmdline,
                         buf: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cmdline_complete(cl: *mut Struct_cmdline,
                            buf: *const ::std::os::raw::c_char,
                            state: *mut ::std::os::raw::c_int,
                            dst: *mut ::std::os::raw::c_char,
                            size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_isendoftoken(c: ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cmdline_parse_etheraddr(tk: *mut cmdline_parse_token_hdr_t,
                                   srcbuf: *const ::std::os::raw::c_char,
                                   res: *mut ::std::os::raw::c_void,
                                   ressize: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_get_help_etheraddr(tk: *mut cmdline_parse_token_hdr_t,
                                      dstbuf: *mut ::std::os::raw::c_char,
                                      size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_parse_ipaddr(tk: *mut cmdline_parse_token_hdr_t,
                                srcbuf: *const ::std::os::raw::c_char,
                                res: *mut ::std::os::raw::c_void,
                                ressize: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_get_help_ipaddr(tk: *mut cmdline_parse_token_hdr_t,
                                   dstbuf: *mut ::std::os::raw::c_char,
                                   size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_parse_num(tk: *mut cmdline_parse_token_hdr_t,
                             srcbuf: *const ::std::os::raw::c_char,
                             res: *mut ::std::os::raw::c_void,
                             ressize: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_get_help_num(tk: *mut cmdline_parse_token_hdr_t,
                                dstbuf: *mut ::std::os::raw::c_char,
                                size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_parse_portlist(tk: *mut cmdline_parse_token_hdr_t,
                                  srcbuf: *const ::std::os::raw::c_char,
                                  res: *mut ::std::os::raw::c_void,
                                  ressize: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_get_help_portlist(tk: *mut cmdline_parse_token_hdr_t,
                                     dstbuf: *mut ::std::os::raw::c_char,
                                     size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_parse_string(tk: *mut cmdline_parse_token_hdr_t,
                                srcbuf: *const ::std::os::raw::c_char,
                                res: *mut ::std::os::raw::c_void,
                                ressize: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_complete_get_nb_string(tk: *mut cmdline_parse_token_hdr_t)
     -> ::std::os::raw::c_int;
    pub fn cmdline_complete_get_elt_string(tk: *mut cmdline_parse_token_hdr_t,
                                           idx: ::std::os::raw::c_int,
                                           dstbuf:
                                               *mut ::std::os::raw::c_char,
                                           size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_get_help_string(tk: *mut cmdline_parse_token_hdr_t,
                                   dstbuf: *mut ::std::os::raw::c_char,
                                   size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn cmdline_file_new(ctx: *mut cmdline_parse_ctx_t,
                            prompt: *const ::std::os::raw::c_char,
                            path: *const ::std::os::raw::c_char)
     -> *mut Struct_cmdline;
    pub fn cmdline_stdin_new(ctx: *mut cmdline_parse_ctx_t,
                             prompt: *const ::std::os::raw::c_char)
     -> *mut Struct_cmdline;
    pub fn cmdline_stdin_exit(cl: *mut Struct_cmdline);
    pub fn cfgetospeed(__termios_p: *const Struct_termios) -> speed_t;
    pub fn cfgetispeed(__termios_p: *const Struct_termios) -> speed_t;
    pub fn cfsetospeed(__termios_p: *mut Struct_termios, __speed: speed_t)
     -> ::std::os::raw::c_int;
    pub fn cfsetispeed(__termios_p: *mut Struct_termios, __speed: speed_t)
     -> ::std::os::raw::c_int;
    pub fn cfsetspeed(__termios_p: *mut Struct_termios, __speed: speed_t)
     -> ::std::os::raw::c_int;
    pub fn tcgetattr(__fd: ::std::os::raw::c_int,
                     __termios_p: *mut Struct_termios)
     -> ::std::os::raw::c_int;
    pub fn tcsetattr(__fd: ::std::os::raw::c_int,
                     __optional_actions: ::std::os::raw::c_int,
                     __termios_p: *const Struct_termios)
     -> ::std::os::raw::c_int;
    pub fn cfmakeraw(__termios_p: *mut Struct_termios);
    pub fn tcsendbreak(__fd: ::std::os::raw::c_int,
                       __duration: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn tcdrain(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn tcflush(__fd: ::std::os::raw::c_int,
                   __queue_selector: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn tcflow(__fd: ::std::os::raw::c_int,
                  __action: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn tcgetsid(__fd: ::std::os::raw::c_int) -> __pid_t;
    pub fn cmdline_new(ctx: *mut cmdline_parse_ctx_t,
                       prompt: *const ::std::os::raw::c_char,
                       s_in: ::std::os::raw::c_int,
                       s_out: ::std::os::raw::c_int) -> *mut Struct_cmdline;
    pub fn cmdline_set_prompt(cl: *mut Struct_cmdline,
                              prompt: *const ::std::os::raw::c_char);
    pub fn cmdline_free(cl: *mut Struct_cmdline);
    pub fn cmdline_printf(cl: *const Struct_cmdline,
                          fmt: *const ::std::os::raw::c_char, ...);
    pub fn cmdline_in(cl: *mut Struct_cmdline,
                      buf: *const ::std::os::raw::c_char,
                      size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn cmdline_write_char(rdl: *mut Struct_rdline,
                              c: ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cmdline_poll(cl: *mut Struct_cmdline) -> ::std::os::raw::c_int;
    pub fn cmdline_interact(cl: *mut Struct_cmdline);
    pub fn cmdline_quit(cl: *mut Struct_cmdline);


    pub fn mp_hdlr_init_ops_mp_mc();
    pub fn mp_hdlr_init_ops_sp_sc();
    pub fn mp_hdlr_init_ops_mp_sc();
    pub fn mp_hdlr_init_ops_sp_mc();    
}
